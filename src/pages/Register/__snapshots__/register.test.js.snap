// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Register page renders correctly 1`] = `
<I18nextProvider
  i18n={
    Object {
      "language": "en-US",
      "languages": Array [
        "en-US",
        "en",
      ],
      "options": Object {
        "appendNamespaceToCIMode": false,
        "appendNamespaceToMissingKey": false,
        "contextSeparator": "_",
        "debug": false,
        "defaultNS": "translations",
        "fallbackLng": Array [
          "en",
        ],
        "fallbackNS": false,
        "ignoreJSONStructure": true,
        "initImmediate": true,
        "interpolation": Object {
          "escapeValue": false,
          "format": [Function],
          "formatSeparator": ",",
          "maxReplaces": 1000,
          "nestingOptionsSeparator": ",",
          "nestingPrefix": "$t(",
          "nestingSuffix": ")",
          "prefix": "{{",
          "skipOnVariables": true,
          "suffix": "}}",
          "unescapePrefix": "-",
        },
        "joinArrays": false,
        "keySeparator": ".",
        "load": "all",
        "missingInterpolationHandler": false,
        "missingKeyHandler": false,
        "nonExplicitSupportedLngs": false,
        "ns": Array [
          "translations",
        ],
        "nsSeparator": ":",
        "overloadTranslationOptionHandler": [Function],
        "parseMissingKeyHandler": false,
        "partialBundledLanguages": false,
        "pluralSeparator": "_",
        "postProcess": false,
        "postProcessPassResolved": false,
        "preload": false,
        "resources": Object {
          "en": Object {
            "translations": Object {
              "common": Object {
                "action": "Action",
                "actions": "Actions",
                "all": "All",
                "asc": "Low to High",
                "at": "At",
                "available": "Available",
                "by": "By",
                "delete_confirm": "Are you sure to delete ?",
                "desc": "High to Low",
                "disabled": "Disabled",
                "documents": "Documents",
                "file_id": "File ID",
                "from": "From",
                "general_info": "General Info",
                "history": "History",
                "items": "Items",
                "log": "Logs",
                "note": "Notes",
                "order": "ORDER BY",
                "price": "{{val, currency(currency: USD)}}",
                "split": "Split",
                "sum": "Sum",
                "summary": "Summary",
                "supplier_number": "{{number}} suppliers",
                "table_range": "{{from}} - {{to}} of {{total}} items",
                "to": "To",
                "total": "Total: {{number}}",
                "update": "Update",
                "update_confirm": "Are you sure to save this update ?",
                "zendesk_ticket": "Zendesk Ticket",
                "zendesk_user": "Zendesk User",
              },
              "cta": Object {
                "add": "Add",
                "adjust": "Adjust",
                "apply": "Apply",
                "approve_order": "Approve Order",
                "back_to_list": "Back to List",
                "become_partner": "Become a partner",
                "business": "Business",
                "buy-it-now": "BUY IT NOW",
                "cancel_order": "Cancel Order",
                "cancle": "Cancle",
                "delete": "Delete",
                "delivered": "Delivered",
                "download": "Download",
                "download_order_csv": "CSV",
                "download_order_delivery_note": "Delivery Note (PDF)",
                "download_order_pdf": "Order (PDF)",
                "economy": "Economy",
                "finish_order": "Set Finished",
                "force_supplier_approve": "Force Supplier Approval",
                "loading": "loading",
                "login": "Login",
                "logout": "Logout",
                "move": "Move",
                "place-holder-search": "Type anything to search",
                "place_holder_input-email": "Enter your email",
                "refresh": "Refresh",
                "register": "Register",
                "report": "Report",
                "save": "Save",
                "search": "Search",
                "show_history": "Show History",
                "split": "Split",
                "subscribe": "Subscribe",
                "supplier_approve": "Supplier Approval",
                "update": "Update",
                "upload": "Upload",
                "upload_order_confirmation": "Upload Confirmation",
              },
              "delivery_detail": Object {
                "cta": Object {
                  "delete": "Delete this delivery",
                },
                "delete_confirmation": "Are you sure you want to delete delivery {{id}}",
                "field": Object {
                  "finished_at": "Finished at",
                  "paper": "{{supplier}}'s papers",
                  "started_at": "Started at",
                },
                "tracked_time": "Tracked time",
              },
              "delivery_status": Object {
                "0": "Open",
                "1": "Confirmed",
                "2": "Arrived",
                "3": "In Progress",
                "4": "Finished",
                "5": "Cancelled",
              },
              "error": Object {
                "order_upload": Object {
                  "missing_delivery_date": "Proposed delivery date of some order lines is missing in file.",
                  "missing_lines": "There is some order lines missing in PDF file.",
                },
              },
              "field": Object {
                "booking_date": "Booking Date",
                "confirm_delivery": "Connox Confirm Delivery",
                "created_at": "Created At",
                "currency": "Currency",
                "date": "Date",
                "date_range": "Date range",
                "delivery_date": "Delivery Date",
                "description": "Description",
                "discount": "Discount",
                "duration": "Duration",
                "file": "File",
                "from_date": "From date",
                "id": "ID",
                "item_id": "Item ID",
                "name": "Name",
                "net_base_price": "Net Base Price",
                "net_price": "Net Price",
                "no": "No",
                "order_date": "Order Date",
                "order_id": "Order ID",
                "order_name": "Order Name",
                "parent_distributor_order_id": "Split From",
                "payment_method": "Payment Method",
                "payment_terms_date": "Payment Terms Date",
                "payment_terms_in_days": "Payment Terms In Days",
                "position": "Position",
                "proposed_delivery": "Proposed Delivery",
                "quantity": "Quantity",
                "reference_no": "Reference Nr",
                "remarks": "Remarks",
                "select_detail_page": "Select Color, Size CM, and Size",
                "start_at": "Start At",
                "status": "Status",
                "supplier": "Supplier",
                "supplier_id": "Supplier ID",
                "supplier_sku": "Supplier SKU",
                "thresholds": "Thresholds",
                "timeslot": "Timeslot",
                "to_date": "To date",
                "total_amount": "Total Amount",
                "total_gross": "Gross Total",
                "total_positions": "Total Positions",
                "updated_at": "Updated At",
                "uploaded_by": "Uploaded By",
                "user": "User",
                "warehouse": "Warehouse",
              },
              "filter": Object {},
              "flight-booking-page": Object {
                "All toll tax, parking, fuel, and driver allowances": "All toll tax, parking, fuel, and driver allowances",
                "Apartment": "Apartment",
                "Apply voucher": "Apply voucher",
                "Booking amount": "Booking amount",
                "Buffet breakfast as per the Itinerary": "Buffet breakfast as per the Itinerary",
                "Comfortable and hygienic vehicle": "Comfortable and hygienic vehicle",
                "Complimentary Camel safari, Bonfire": "Complimentary Camel safari, Bonfire",
                "Continue to payment": "Continue to payment",
                "Coupon code": "Coupon code",
                "Discount": "Discount",
                "Economy Price": "Economy Price",
                "Email address": "Email address",
                "First name": "First name",
                "Flights": "Flights",
                "From": "From",
                "I have read the": "I have read the",
                "I have read the agreement": "I have read the agreement",
                "Mobile number": "Mobile number",
                "OFF": "Giáº£m",
                "Optional": "Optional",
                "Passenger information": "Passenger information",
                "Passport no.": "Passport no.",
                "Pay Now": "Pay Now",
                "Payment methods": "Payment methods",
                "Please input your E-mail!": "Please input your E-mail!",
                "Please input your Passport!": "Please input your Passport!",
                "Please input your apartment!": "Please input your apartment!",
                "Please input your birthdate!": "Please input your birthdate!",
                "Please input your first name!": "Please input your first name!",
                "Please input your phone number!": "Please input your phone number!",
                "Please input your street address!": "Please input your street address!",
                "Please input your visa!": "Please input your visa!",
                "Prices": "Prices",
                "Should accept agreement": "Should accept agreement",
                "Street address": "Street address",
                "Subtotal": "Subtotal",
                "Tax": "Tax",
                "To": "To",
                "Total Amount": "Total Amount",
                "Visa no.": "Visa no.",
                "Visit eight villages showcasing Polynesian culture": "Visit eight villages showcasing Polynesian culture",
                "Your birthdate": "Your birthdate",
                "agreement": "agreements",
                "hours": "hours",
                "input your discount number": "input your discount number",
                "minutes": "minutes",
                "multiply price": "$t(cta.{{class}}) Price x {{multiply}}",
                "payment successful": "payment successful",
                "remove": "remove",
              },
              "flight-list-page": Object {
                "$": "$",
                "Afternoon": "Afternoon",
                "Airline": "Airline",
                "All time": "All time",
                "Book now": "Book now",
                "Cheapest price first": "Cheapest price first",
                "Clear": "Clear",
                "Delete": "Delete",
                "Direct": "Direct",
                "Early Morning": "Early Morning",
                "Evening": "Evening",
                "Flight details": "Flight details",
                "Fly time Fastest": "Fly time: Fastest",
                "From": "From",
                "Morning": "Morning",
                "OFF": "*{{number}}% OFF",
                "Order by": "Order by",
                "Price": "Price",
                "Price Low to High": "Price: Low to High",
                "Selected outbound": "Selected outbound",
                "Sorry we didn't find any results matching this search": "Sorry we didn't find any results matching this search",
                "Times": "Times",
                "To": "To",
                "flight-banner": Object {
                  "Amazing journeys. Every day.": "Amazing journeys. Every day.",
                  "EXPLORE THE WORLD WITH US": "EXPLORE THE WORLD WITH US",
                },
                "flights found": "{{number}} flights found",
                "hour": "hour",
              },
              "footer": Object {
                "About Us": "About Us",
                "Account": "Account",
                "Affiliate Program": "Affiliate Program",
                "Blog": "Blog",
                "CMail to our support team": "CMail to our support team",
                "Call 24/7 for any help": "Call 24/7 for any help",
                "Community program": "Community program",
                "Company": "Company",
                "Contact": "Contact",
                "Faq": "Faq",
                "Investor Relations": "Investor Relations",
                "Legal": "Legal",
                "Meet the Team": "Meet the Team",
                "Need any help?": "Need any help?",
                "Other Services": "Other Services",
                "Partners": "Partners",
                "PointsPLUS": "PointsPLUS",
                "Privacy Policy": "Privacy Policy",
                "Rewards": "Rewards",
                "Rewards Program": "Rewards Program",
                "Support": "Support",
                "Testimonials": "Testimonials",
                "Top cities": "Top cities",
                "Work with Us": "Work with Us",
              },
              "gate_day": Object {
                "delivery_modal": Object {
                  "title": "Add New Delivery:",
                },
                "unassigned": "Unassigned",
              },
              "header": Object {
                "navbar": Object {
                  "destination_booking": "Destination booking",
                  "flight": "Flight",
                  "flight_booking": "Flight booking",
                  "home": "Home",
                  "news": "News",
                  "pages": "Pages",
                  "top_destination": "Top destination",
                  "tour": "Tour",
                  "tour_booking": "Tour booking",
                },
              },
              "home-page": Object {
                "goBeyond-section": Object {
                  "Gobeyond": "Go beyond your",
                  "deal": "top deal",
                  "discount": "7% Discount for all",
                  "discount_airlines": "Airlines",
                  "discover_your_ideal": "Discover your ideal experience with us",
                  "imagination": "imagination",
                  "resort": "Luxury resorts",
                  "travel": "Travel around",
                  "world": "the world",
                },
                "home-banner": Object {
                  "THE WHOLE WORLD AWAITS": "THE WHOLE WORLD AWAITS",
                },
                "offer-area-section": Object {
                  "Get tips": "Get tips",
                  "Holiday deals": "Holiday deals",
                  "Newsletter": "News letter",
                  "Special Offers": "Special Offers",
                  "Subscribe now": "Subscribe now",
                  "Travel tips": "Travel tips",
                },
                "top-destinations-section": Object {
                  "book-now": "Book Now",
                  "holiday": "Holiday packages",
                  "off": "Off",
                  "title": "Top destinations",
                  "up-to": "Up to",
                  "view-all": "View all",
                },
              },
              "login": Object {
                "Don't have an account?": "Don't have an account?",
                "Email is not valid": "Email is not valid",
                "Enter password": "Enter password",
                "Enter your email": "Enter your email",
                "Forgot password?": "Forgot password?",
                "Logged in to stay in touch": "Logged in to stay in touch",
                "Login": "Login",
                "Please input your email!": "Please input your email!",
                "Please input your password": "Please input your password",
                "Register now": "Register now",
                "Welcome back": "Welcome back",
              },
              "mapping": Object {
                "delivery_status": "$t(delivery_status.{{status}})",
                "field": "$t(field.{{name}})",
                "order_history_action": "$t(order_history_action.{{action}})",
                "order_status": "$t(order_status.{{status}})",
                "order_timeslot": "$t(order_timeslot.{{value}})",
                "order_uploaded_status": "$t(natif_status.{{status}})",
              },
              "natif_status": Object {
                "0": "Init",
                "1": "Upload Processing",
                "2": "Upload Done",
                "3": "Upload Error",
                "4": "Natif Processing",
                "5": "Natif Done",
                "6": "Natif Error",
                "7": "Skip",
                "8": "Done",
              },
              "order": Object {
                "title": "Orders",
              },
              "order_detail": Object {
                "table_action": Object {
                  "accept_confirm_date": "Accept Confirm Delivery Date",
                  "accept_delivery_date": "Accept Delivery Date",
                  "edit": "Edit Item",
                  "edit_confirm_date": "Edit Confirm Delivery Date",
                  "edit_delivery_date": "Edit Delivery Date",
                },
              },
              "order_document": Object {
                "upload": Object {
                  "document_help": "PDF, DOC, DOCX, XLS, XLSX files only",
                  "title": "Upload document for Order #{{orderId}}",
                },
              },
              "order_history_action": Object {
                "1": "Change Status",
                "10": "Upload Document",
                "11": "Delete Document",
                "2": "Add Note",
                "3": "Update Note",
                "4": "Update Order Info",
                "5": "Update Order Item",
                "6": "Update Delivery Date",
                "7": "Update Confirmation Date",
                "8": "Split",
                "9": "Upload File",
              },
              "order_status": Object {
                "0": "Pending",
                "1": "Supplier Approved",
                "2": "Arrival Confirmation",
                "3": "Cancelled",
                "4": "Approved",
                "5": "Delivered",
                "6": "Finished",
              },
              "order_timeslot": Object {
                "0000-0000": "No Timeslot",
                "08:00-12:00": "08:00-12:00",
                "12:00-15:00": "12:00-15:00",
                "15:00-18:00": "15:00-18:00",
              },
              "order_upload": Object {
                "parse_status": "Parse status: $t(natif_status.{{status}})",
                "process_manual": "Please process order manual on ECS",
                "title": "Parsed orders",
                "update_lines": "Update lines",
              },
              "order_upload_modal": Object {
                "field": Object {
                  "help": "Choose file (pdf, csv)",
                },
                "file_note": "PDF or CSV",
                "title": "Upload order confirmation",
                "title_order": "Upload confirmation for Order #{{orderId}}",
              },
              "order_upload_report_modal": Object {
                "title": "Export Report",
              },
              "profile-page": Object {
                "Action": "Action",
                "Booking Amount": "Booking Amount",
                "Booking History": "Booking History",
                "Booking ID": "Booking ID",
                "Journey": "Journey",
                "My Booking": "My Booking",
                "My Profile": "My Profile",
                "Status": "Status",
              },
              "register": Object {
                "Already have an account?": "Already have an account?",
                "Enter password": "Enter password",
                "Enter your email": "Enter your email",
                "Enter your name": "Enter your name",
                "Enter your phone": "Enter your phone",
                "Login now": "Login now",
                "Register": "Register",
                "Register your account": "Register your account",
                "To join a whole new world": "To join a whole new world",
              },
              "search_form": Object {
                "Add return date": "Add return date",
                "No. of Passengers": "No. of Passengers",
                "business": "Business",
                "class": "Class",
                "economy": "Economy",
                "first_class": "First Class",
                "from": "From",
                "journey_date": "Journey Date",
                "one_way": "One Way",
                "passenger": "Passenger",
                "passenger_one": "{{count}} passenger",
                "passenger_other": "{{count}} passengers",
                "return_date": "Return Date",
                "round_trip": "Round Trip",
                "to": "To",
              },
              "subscribe-form": Object {
                "Enter your email address": "Enter your email address",
                "Get the latest news and offers": "Get the latest news and offers",
                "Subscribe": "Subscribe",
                "Subscribe to our newsletter": "Subscribe to our newsletter",
              },
            },
          },
          "vi": Object {
            "translations": Object {
              "common": Object {
                "action": "Action",
                "actions": "Actions",
                "all": "All",
                "asc": "Tháº¥p Äáº¿n cao",
                "at": "At",
                "available": "Available",
                "by": "By",
                "delete_confirm": "Are you sure to delete ?",
                "desc": "Cao Äáº¿n tháº¥p",
                "disabled": "Disabled",
                "documents": "Documents",
                "file_id": "File ID",
                "from": "From",
                "general_info": "General Info",
                "history": "History",
                "items": "Items",
                "log": "Logs",
                "note": "Notes",
                "order": "Sáº®P Xáº¾P",
                "split": "Split",
                "sum": "Sum",
                "summary": "Summary",
                "supplier_number": "{{number}} suppliers",
                "table_range": "{{from}} - {{to}} of {{total}} items",
                "to": "To",
                "total": "Total: {{number}}",
                "update": "Update",
                "update_confirm": "Are you sure to save this update ?",
                "zendesk_ticket": "Zendesk Ticket",
                "zendesk_user": "Zendesk User",
              },
              "cta": Object {
                "add": "ThÃªm",
                "adjust": "Adjust",
                "apply": "Apply",
                "approve_order": "Approve Order",
                "back_to_list": "Back to List",
                "become_partner": "Trá» thÃ nh Äá»i tÃ¡c",
                "business": "thÆ°Æ¡ng gia",
                "buy-it-now": "MUA NGAY",
                "cancel_order": "Cancel Order",
                "cancle": "Trá» vá»",
                "delete": "Delete",
                "delivered": "Delivered",
                "download": "Download",
                "download_order_csv": "CSV",
                "download_order_delivery_note": "Delivery Note (PDF)",
                "download_order_pdf": "Order (PDF)",
                "economy": "phá» thÃ´ng",
                "finish_order": "Set Finished",
                "force_supplier_approve": "Force Supplier Approval",
                "loading": "Äang táº£i",
                "login": "ÄÄng nháº­p",
                "logout": "ÄÄng xuáº¥t",
                "move": "Move",
                "place-holder-search": "Nháº­p Äá» gá»­i",
                "place_holder_input-email": "Gá»­i thÆ° gÃ³p Ã½",
                "refresh": "Refresh",
                "register": "ÄÄng kÃ½",
                "report": "Report",
                "save": "Save",
                "search": "TÃ¬m kiáº¿m",
                "show_history": "Show History",
                "split": "Split",
                "subscribe": "Gá»­i",
                "supplier_approve": "Supplier Approval",
                "update": "Cáº­p nháº­t",
                "upload": "Upload",
                "upload_order_confirmation": "Upload Confirmation",
              },
              "delivery_detail": Object {
                "cta": Object {
                  "delete": "Delete this delivery",
                },
                "delete_confirmation": "Are you sure you want to delete delivery {{id}}",
                "field": Object {
                  "finished_at": "Finished at",
                  "paper": "{{supplier}}'s papers",
                  "started_at": "Started at",
                },
                "tracked_time": "Tracked time",
              },
              "delivery_status": Object {
                "0": "Open",
                "1": "Confirmed",
                "2": "Arrived",
                "3": "In Progress",
                "4": "Finished",
                "5": "Cancelled",
              },
              "error": Object {
                "order_upload": Object {
                  "missing_delivery_date": "Proposed delivery date of some order lines is missing in file.",
                  "missing_lines": "There is some order lines missing in PDF file.",
                },
              },
              "field": Object {
                "booking_date": "Booking Date",
                "confirm_delivery": "Connox Confirm Delivery",
                "created_at": "Created At",
                "currency": "Currency",
                "date": "Date",
                "date_range": "Date range",
                "delivery_date": "Delivery Date",
                "description": "Description",
                "discount": "Discount",
                "duration": "Duration",
                "file": "File",
                "from_date": "From date",
                "id": "ID",
                "item_id": "Item ID",
                "name": "Name",
                "net_base_price": "Net Base Price",
                "net_price": "Net Price",
                "no": "No",
                "order_date": "Order Date",
                "order_id": "Order ID",
                "order_name": "Order Name",
                "parent_distributor_order_id": "Split From",
                "payment_method": "Payment Method",
                "payment_terms_date": "Payment Terms Date",
                "payment_terms_in_days": "Payment Terms In Days",
                "position": "Position",
                "proposed_delivery": "Proposed Delivery",
                "quantity": "Sá» lÆ°á»£ng",
                "reference_no": "Reference Nr",
                "remarks": "Remarks",
                "select_detail_page": "HÃ£y chá»n mÃ u, khung vÃ  kÃ­ch cá»¡ cá»§a xe",
                "start_at": "Start At",
                "status": "Status",
                "supplier": "Supplier",
                "supplier_id": "Supplier ID",
                "supplier_sku": "Supplier SKU",
                "thresholds": "Thresholds",
                "timeslot": "Timeslot",
                "to_date": "To date",
                "total_amount": "Total Amount",
                "total_gross": "Gross Total",
                "total_positions": "Total Positions",
                "updated_at": "Updated At",
                "uploaded_by": "Uploaded By",
                "user": "User",
                "warehouse": "Warehouse",
              },
              "filter": Object {},
              "flight-booking-page": Object {
                "All toll tax, parking, fuel, and driver allowances": "Táº¥t cáº£ thuáº¿ phÃ­, Äáº­u xe, nhiÃªn liá»u vÃ  phá»¥ cáº¥p lÃ¡i xe",
                "Apartment": "Äá»a chá» nhÃ ",
                "Apply voucher": "Ãp dá»¥ng phiáº¿u giáº£m giÃ¡",
                "Booking amount": "Tiá»n Äáº·t",
                "Buffet breakfast as per the Itinerary": "Bá»¯a sÃ¡ng tá»± chá»n theo hÃ nh trÃ¬nh",
                "Comfortable and hygienic vehicle": "Xe thoáº£i mÃ¡i vÃ  há»£p vá» sinh",
                "Complimentary Camel safari, Bonfire": "Miá»n phÃ­ Camel safari, Bonfire",
                "Continue to payment": "Tiáº¿p tá»¥c thanh toÃ¡n",
                "Coupon code": "MÃ£ giáº£m giÃ¡",
                "Discount": "Giáº£m",
                "Economy Price": "GiÃ¡ háº¡ng phá» thÃ´ng",
                "Email address": "Äá»a chá» email",
                "First name": "TÃªn",
                "Flights": "Chuyáº¿n bay",
                "From": "Tá»«",
                "I have read the": "TÃ´i ÄÃ£ Äá»c",
                "Mobile number": "Sá» Äiá»n thoáº¡i",
                "OFF": "Giáº£m",
                "Optional": "TÃ¹y chá»n",
                "Passenger information": "ThÃ´ng tin hÃ nh khÃ¡ch",
                "Passport no.": "Sá» há» chiáº¿u",
                "Pay Now": "Thanh toÃ¡n ngay",
                "Payment methods": "PhÆ°Æ¡ng thá»©c thanh toÃ¡n",
                "Please input your E-mail!": "Xin vui lÃ²ng nháº­p E-mail!",
                "Please input your Passport!": "Xin vui lÃ²ng nháº­p mÃ£ sá» há» chiáº¿u!",
                "Please input your apartment!": "Xin vui lÃ²ng nháº­p Äá»a chá» nhÃ !",
                "Please input your birthdate!": "Xin vui lÃ²ng nháº­p ngÃ y sinh!",
                "Please input your first name!": "Xin vui lÃ²ng nháº­p TÃªn!",
                "Please input your phone number!": "Xin vui lÃ²ng nháº­p sá» Äiá»n thoáº¡i!",
                "Please input your street address!": "Xin vui lÃ²ng nháº­p Äá»a chá» ÄÆ°á»ng!",
                "Please input your visa!": "Xin vui lÃ²ng nháº­p mÃ£ sá» visa!",
                "Prices": "GiÃ¡",
                "Should accept agreement": "Báº¡n chÆ°a Äá»ng Ã½ vá»i thá»a thuáº­n",
                "Street address": "Äá»a chá» ÄÆ°á»ng",
                "Subtotal": "Táº¡m tÃ­nh",
                "Tax": "Tax",
                "To": "Äáº¿n",
                "Total Amount": "Tá»ng giÃ¡",
                "Visa no.": "MÃ£ sá» Visa",
                "Visit eight villages showcasing Polynesian culture": "GhÃ© thÄm tÃ¡m ngÃ´i lÃ ng thá» hiá»n vÄn hÃ³a Polynesia",
                "Your birthdate": "NgÃ y Sinh cá»§a báº¡n",
                "agreement": "thá»a thuáº­n",
                "hours": "giá»",
                "input your discount number": "Nháº­p mÃ£ giáº£m giÃ¡",
                "minutes": "phÃºt",
                "multiply price": "GiÃ¡ $t(cta.{{class}}) x {{multiply}}",
                "payment successful": "Thanh toÃ¡n thÃ nh cÃ´ng",
                "remove": "xÃ³a",
              },
              "flight-list-page": Object {
                "$": "â«",
                "Afternoon": "Chiá»u",
                "Airline": "HÃ£ng hÃ ng khÃ´ng",
                "All time": "Má»i lÃºc",
                "Book now": "Äáº·t ngay",
                "Cheapest price first": "Cheapest price first",
                "Clear": "XÃ³a",
                "Delete": "XÃ³a bá»",
                "Direct": "Bay tháº³ng",
                "Early Morning": "Ráº¡ng sÃ¡ng",
                "Evening": "Tá»i",
                "Flight details": "Chi tiáº¿t",
                "Fly time Fastest": "Thá»i gian: Nhanh nháº¥t",
                "From": "Tá»«",
                "Morning": "SÃ¡ng",
                "OFF": "*GIáº¢M {{number}}%",
                "Order by": "Sáº¯p xáº¿p theo",
                "Price": "GiÃ¡",
                "Price Low to High": "GiÃ¡: Tháº¥p Äáº¿n Cao",
                "Selected outbound": "ÄÃ£ chá»n",
                "Sorry we didn't find any results matching this search": "Xin lá»i chÃºng tÃ´i khÃ´ng thá» tÃ¬m tháº¥y káº¿t quáº£ phÃ¹ há»£p",
                "Times": "Buá»i",
                "To": "Äáº¿n",
                "flight-banner": Object {
                  "Amazing journeys. Every day.": "Nhá»¯ng cuá»c hÃ nh trÃ¬nh tuyá»t vá»i. Má»i ngÃ y.",
                  "EXPLORE THE WORLD WITH US": "HÃY CÃNG CHÃNG TÃI KHÃM PHÃ THáº¾ GIá»I",
                },
                "flights found": "{{number}} chuyáº¿n bay",
                "hour": "giá»",
              },
              "footer": Object {
                "About Us": "Vá» chÃºng tÃ´i",
                "Account": "TÃ i khoáº£n",
                "Affiliate Program": "ChÆ°Æ¡ng trÃ¬nh liÃªn káº¿t",
                "Blog": "Blog",
                "CMail to our support team": "Mail Äá»i ngÅ© há» trá»£ cá»§a chÃºng tÃ´i",
                "Call 24/7 for any help": "Gá»i 24/7",
                "Community program": "ChÆ°Æ¡ng trÃ¬nh cá»ng Äá»ng",
                "Company": "CÃ´ng ty",
                "Contact": "LiÃªn há»",
                "Faq": "CÃ¢u há»i thÆ°á»ng gáº­p",
                "Investor Relations": "Quan há» Äáº§u tÆ°",
                "Legal": "Há»£p phÃ¡p",
                "Meet the Team": "Gáº·p gá»¡ Äá»i ngÅ©",
                "Need any help?": "Cáº§n trá»£ giÃºp?",
                "Other Services": "CÃ¡c dá»ch vá»¥ khÃ¡c",
                "Partners": "Äá»i tÃ¡c",
                "PointsPLUS": "PointsPLUS",
                "Privacy Policy": "ChÃ­nh sÃ¡ch báº£o máº­t",
                "Rewards": "Pháº§n thÆ°á»ng",
                "Rewards Program": "ChÆ°Æ¡ng trÃ¬nh khen thÆ°á»ng",
                "Support": "Há» trá»£",
                "Testimonials": "Lá»i chá»©ng thá»±c",
                "Top cities": "CÃ¡c thÃ nh phá» hÃ ng Äáº§u",
                "Work with Us": "LÃ m viá»c vá»i chÃºng tÃ´i",
              },
              "gate_day": Object {
                "delivery_modal": Object {
                  "title": "Add New Delivery:",
                },
                "unassigned": "Unassigned",
              },
              "header": Object {
                "navbar": Object {
                  "destination_booking": "Äáº·t Äiá»m Äáº¿n",
                  "flight": "Chuyáº¿n bay",
                  "flight_booking": "Äáº·t chuyáº¿n bay",
                  "home": "Trang chá»§",
                  "news": "TÃ­n tá»©c",
                  "pages": "Trang khÃ¡c",
                  "top_destination": "Äiá»m Äáº¿n hÃ ng Äáº§u",
                  "tour": "Chuyáº¿n du lá»ch",
                  "tour_booking": "Äáº·t chuyáº¿n du lá»ch",
                },
              },
              "home-page": Object {
                "goBeyond-section": Object {
                  "Gobeyond": "VÆ°á»£t ra khá»i",
                  "deal": "vá»i nhiá»u Æ°u ÄÃ£i",
                  "discount": "Giáº£m 7% cho táº¥t cáº£",
                  "discount_airlines": "cÃ¡c hÃ£ng hÃ ng khÃ´ng",
                  "discover_your_ideal": "CÃ¹ng chÃºng tÃ´i khÃ¡m phÃ¡ nhá»¯ng tráº£i nghiá»m tuyá»t vá»i",
                  "imagination": "trÃ­ tÆ°á»ng tÆ°á»£ng",
                  "resort": "Resorts sang trá»ng",
                  "travel": "Äi kháº¯p",
                  "world": "Tháº¿ giá»i",
                },
                "home-banner": Object {
                  "THE WHOLE WORLD AWAITS": "Cáº¢ THáº¾ GIá»I ÄANG Äá»¢I Báº N",
                },
                "offer-area-section": Object {
                  "Get tips": "Nháº­n ngay",
                  "Holiday deals": "Ká»³ nghÄ© Æ°u ÄÃ£i",
                  "Newsletter": "Báº£n tin",
                  "Special Offers": "Æ¯u ÄÃ£i Äáº·c biá»t",
                  "Subscribe now": "ÄÄng kÃ½ ngay",
                  "Travel tips": "Giáº£i phÃ¡p du lá»ch",
                },
                "top-destinations-section": Object {
                  "book-now": "Äáº·t ngay",
                  "holiday": "GÃ³i nghÄ© dÆ°á»¡ng",
                  "off": "",
                  "title": "Äiá»m Äáº¿n hÃ ng Äáº§u",
                  "up-to": "Giáº£m Äáº¿n",
                  "view-all": "Táº¥t cáº£",
                },
              },
              "login": Object {
                "Don't have an account?": "KhÃ´ng cÃ³ tÃ i khoáº£n?",
                "Email is not valid": "Email khÃ´ng há»£p lá»",
                "Enter password": "Nháº­p máº­t kháº©u cá»§a báº¡n",
                "Enter your email": "Nháº­p email cá»§a báº¡n",
                "Forgot password?": "QuÃªn máº­t kháº©u?",
                "Logged in to stay in touch": "ÄÄng nháº­p Äá» giá»¯ liÃªn láº¡c",
                "Login": "ÄÄng nháº­p",
                "Please input your email": "Vui lÃ²ng nháº­p vÃ o email cá»§a báº¡n",
                "Please input your password": "Vui lÃ²ng nháº­p vÃ o password cá»§a báº¡n",
                "Register now": "ÄÄng kÃ½ ngay",
                "Welcome back": "Má»«ng báº¡n quay láº¡i",
              },
              "mapping": Object {
                "delivery_status": "$t(delivery_status.{{status}})",
                "field": "$t(field.{{name}})",
                "order_history_action": "$t(order_history_action.{{action}})",
                "order_status": "$t(order_status.{{status}})",
                "order_timeslot": "$t(order_timeslot.{{value}})",
                "order_uploaded_status": "$t(natif_status.{{status}})",
              },
              "natif_status": Object {
                "0": "Init",
                "1": "Upload Processing",
                "2": "Upload Done",
                "3": "Upload Error",
                "4": "Natif Processing",
                "5": "Natif Done",
                "6": "Natif Error",
                "7": "Skip",
                "8": "Done",
              },
              "order": Object {
                "title": "Orders",
              },
              "order_detail": Object {
                "table_action": Object {
                  "accept_confirm_date": "Accept Confirm Delivery Date",
                  "accept_delivery_date": "Accept Delivery Date",
                  "edit": "Edit Item",
                  "edit_confirm_date": "Edit Confirm Delivery Date",
                  "edit_delivery_date": "Edit Delivery Date",
                },
              },
              "order_document": Object {
                "upload": Object {
                  "document_help": "PDF, DOC, DOCX, XLS, XLSX files only",
                  "title": "Upload document for Order #{{orderId}}",
                },
              },
              "order_history_action": Object {
                "1": "Change Status",
                "10": "Upload Document",
                "11": "Delete Document",
                "2": "Add Note",
                "3": "Update Note",
                "4": "Update Order Info",
                "5": "Update Order Item",
                "6": "Update Delivery Date",
                "7": "Update Confirmation Date",
                "8": "Split",
                "9": "Upload File",
              },
              "order_status": Object {
                "0": "Pending",
                "1": "Supplier Approved",
                "2": "Arrival Confirmation",
                "3": "Cancelled",
                "4": "Approved",
                "5": "Delivered",
                "6": "Finished",
              },
              "order_timeslot": Object {
                "0000-0000": "No Timeslot",
                "08:00-12:00": "08:00-12:00",
                "12:00-15:00": "12:00-15:00",
                "15:00-18:00": "15:00-18:00",
              },
              "order_upload": Object {
                "parse_status": "Parse status: $t(natif_status.{{status}})",
                "process_manual": "Please process order manual on ECS",
                "title": "Parsed orders",
                "update_lines": "Update lines",
              },
              "order_upload_modal": Object {
                "field": Object {
                  "help": "Choose file (pdf, csv)",
                },
                "file_note": "PDF or CSV",
                "title": "Upload order confirmation",
                "title_order": "Upload confirmation for Order #{{orderId}}",
              },
              "order_upload_report_modal": Object {
                "title": "Export Report",
              },
              "profile-page": Object {
                "Action": "Action",
                "Booking Amount": "Booking Amount",
                "Booking History": "Booking History",
                "Booking ID": "Booking ID",
                "Journey": "Journey",
                "My Booking": "My Booking",
                "My Profile": "My Profile",
                "Status": "Status",
              },
              "register": Object {
                "Already have an account?": "ÄÃ£ cÃ³ tÃ i khoáº£n.",
                "Enter password": "Nháº­p máº­t kháº©u",
                "Enter your email": "Nháº­p email",
                "Enter your name": "Nháº­p tÃªn tÃ i khoáº£n",
                "Enter your phone": "Nháº­p sá» Äiá»n thoáº¡i",
                "Login now": "ÄÄng nháº­p ngay",
                "Register": "ÄÄng kÃ½",
                "Register your account": "ÄÄng kÃ½ tÃ i khoáº£n",
                "To join a whole new world": "Tham gia vÃ o má»t tháº¿ giá»i hoÃ n toÃ n má»i",
              },
              "search_form": Object {
                "Add return date": "ThÃªm ngÃ y vá»",
                "No. of Passengers": "Sá» hÃ nh khÃ¡ch",
                "business": "ThÆ°Æ¡ng gia",
                "class": "Háº¡ng gháº¿",
                "economy": "Phá» thÃ´ng",
                "first_class": "Háº¡ng nháº¥t",
                "from": "Tá»«",
                "journey_date": "NgÃ y Äi",
                "one_way": "Má»t Chiá»u",
                "passenger": "HÃ nh khÃ¡ch",
                "passenger_one": "{{count}} HÃ nh khÃ¡ch",
                "passenger_other": "{{count}} HÃ nh khÃ¡ch",
                "return_date": "NgÃ y Vá»",
                "round_trip": "Khá»© Há»i",
                "to": "Äáº¿n",
              },
              "subscribe-form": Object {
                "Enter your email address": "Nháº­p vÃ o email cá»§a báº¡n",
                "Get the latest news and offers": "Nháº­n thÃ´ng tin vÃ  Æ°u ÄÃ£i má»i nháº¥t",
                "Subscribe": "ÄÄng kÃ½",
                "Subscribe to our newsletter": "ÄÄng kÃ½ nháº­n báº£n tin tá»« chÃºng tÃ´i",
              },
            },
          },
        },
        "returnEmptyString": true,
        "returnNull": true,
        "returnObjects": false,
        "returnedObjectHandler": false,
        "saveMissing": false,
        "saveMissingPlurals": true,
        "saveMissingTo": "fallback",
        "simplifyPluralSuffix": true,
        "supportedLngs": false,
        "updateMissing": false,
      },
      "resolvedLanguage": "en",
      "store": Object {
        "en": Object {
          "translations": Object {
            "common": Object {
              "action": "Action",
              "actions": "Actions",
              "all": "All",
              "asc": "Low to High",
              "at": "At",
              "available": "Available",
              "by": "By",
              "delete_confirm": "Are you sure to delete ?",
              "desc": "High to Low",
              "disabled": "Disabled",
              "documents": "Documents",
              "file_id": "File ID",
              "from": "From",
              "general_info": "General Info",
              "history": "History",
              "items": "Items",
              "log": "Logs",
              "note": "Notes",
              "order": "ORDER BY",
              "price": "{{val, currency(currency: USD)}}",
              "split": "Split",
              "sum": "Sum",
              "summary": "Summary",
              "supplier_number": "{{number}} suppliers",
              "table_range": "{{from}} - {{to}} of {{total}} items",
              "to": "To",
              "total": "Total: {{number}}",
              "update": "Update",
              "update_confirm": "Are you sure to save this update ?",
              "zendesk_ticket": "Zendesk Ticket",
              "zendesk_user": "Zendesk User",
            },
            "cta": Object {
              "add": "Add",
              "adjust": "Adjust",
              "apply": "Apply",
              "approve_order": "Approve Order",
              "back_to_list": "Back to List",
              "become_partner": "Become a partner",
              "business": "Business",
              "buy-it-now": "BUY IT NOW",
              "cancel_order": "Cancel Order",
              "cancle": "Cancle",
              "delete": "Delete",
              "delivered": "Delivered",
              "download": "Download",
              "download_order_csv": "CSV",
              "download_order_delivery_note": "Delivery Note (PDF)",
              "download_order_pdf": "Order (PDF)",
              "economy": "Economy",
              "finish_order": "Set Finished",
              "force_supplier_approve": "Force Supplier Approval",
              "loading": "loading",
              "login": "Login",
              "logout": "Logout",
              "move": "Move",
              "place-holder-search": "Type anything to search",
              "place_holder_input-email": "Enter your email",
              "refresh": "Refresh",
              "register": "Register",
              "report": "Report",
              "save": "Save",
              "search": "Search",
              "show_history": "Show History",
              "split": "Split",
              "subscribe": "Subscribe",
              "supplier_approve": "Supplier Approval",
              "update": "Update",
              "upload": "Upload",
              "upload_order_confirmation": "Upload Confirmation",
            },
            "delivery_detail": Object {
              "cta": Object {
                "delete": "Delete this delivery",
              },
              "delete_confirmation": "Are you sure you want to delete delivery {{id}}",
              "field": Object {
                "finished_at": "Finished at",
                "paper": "{{supplier}}'s papers",
                "started_at": "Started at",
              },
              "tracked_time": "Tracked time",
            },
            "delivery_status": Object {
              "0": "Open",
              "1": "Confirmed",
              "2": "Arrived",
              "3": "In Progress",
              "4": "Finished",
              "5": "Cancelled",
            },
            "error": Object {
              "order_upload": Object {
                "missing_delivery_date": "Proposed delivery date of some order lines is missing in file.",
                "missing_lines": "There is some order lines missing in PDF file.",
              },
            },
            "field": Object {
              "booking_date": "Booking Date",
              "confirm_delivery": "Connox Confirm Delivery",
              "created_at": "Created At",
              "currency": "Currency",
              "date": "Date",
              "date_range": "Date range",
              "delivery_date": "Delivery Date",
              "description": "Description",
              "discount": "Discount",
              "duration": "Duration",
              "file": "File",
              "from_date": "From date",
              "id": "ID",
              "item_id": "Item ID",
              "name": "Name",
              "net_base_price": "Net Base Price",
              "net_price": "Net Price",
              "no": "No",
              "order_date": "Order Date",
              "order_id": "Order ID",
              "order_name": "Order Name",
              "parent_distributor_order_id": "Split From",
              "payment_method": "Payment Method",
              "payment_terms_date": "Payment Terms Date",
              "payment_terms_in_days": "Payment Terms In Days",
              "position": "Position",
              "proposed_delivery": "Proposed Delivery",
              "quantity": "Quantity",
              "reference_no": "Reference Nr",
              "remarks": "Remarks",
              "select_detail_page": "Select Color, Size CM, and Size",
              "start_at": "Start At",
              "status": "Status",
              "supplier": "Supplier",
              "supplier_id": "Supplier ID",
              "supplier_sku": "Supplier SKU",
              "thresholds": "Thresholds",
              "timeslot": "Timeslot",
              "to_date": "To date",
              "total_amount": "Total Amount",
              "total_gross": "Gross Total",
              "total_positions": "Total Positions",
              "updated_at": "Updated At",
              "uploaded_by": "Uploaded By",
              "user": "User",
              "warehouse": "Warehouse",
            },
            "filter": Object {},
            "flight-booking-page": Object {
              "All toll tax, parking, fuel, and driver allowances": "All toll tax, parking, fuel, and driver allowances",
              "Apartment": "Apartment",
              "Apply voucher": "Apply voucher",
              "Booking amount": "Booking amount",
              "Buffet breakfast as per the Itinerary": "Buffet breakfast as per the Itinerary",
              "Comfortable and hygienic vehicle": "Comfortable and hygienic vehicle",
              "Complimentary Camel safari, Bonfire": "Complimentary Camel safari, Bonfire",
              "Continue to payment": "Continue to payment",
              "Coupon code": "Coupon code",
              "Discount": "Discount",
              "Economy Price": "Economy Price",
              "Email address": "Email address",
              "First name": "First name",
              "Flights": "Flights",
              "From": "From",
              "I have read the": "I have read the",
              "I have read the agreement": "I have read the agreement",
              "Mobile number": "Mobile number",
              "OFF": "Giáº£m",
              "Optional": "Optional",
              "Passenger information": "Passenger information",
              "Passport no.": "Passport no.",
              "Pay Now": "Pay Now",
              "Payment methods": "Payment methods",
              "Please input your E-mail!": "Please input your E-mail!",
              "Please input your Passport!": "Please input your Passport!",
              "Please input your apartment!": "Please input your apartment!",
              "Please input your birthdate!": "Please input your birthdate!",
              "Please input your first name!": "Please input your first name!",
              "Please input your phone number!": "Please input your phone number!",
              "Please input your street address!": "Please input your street address!",
              "Please input your visa!": "Please input your visa!",
              "Prices": "Prices",
              "Should accept agreement": "Should accept agreement",
              "Street address": "Street address",
              "Subtotal": "Subtotal",
              "Tax": "Tax",
              "To": "To",
              "Total Amount": "Total Amount",
              "Visa no.": "Visa no.",
              "Visit eight villages showcasing Polynesian culture": "Visit eight villages showcasing Polynesian culture",
              "Your birthdate": "Your birthdate",
              "agreement": "agreements",
              "hours": "hours",
              "input your discount number": "input your discount number",
              "minutes": "minutes",
              "multiply price": "$t(cta.{{class}}) Price x {{multiply}}",
              "payment successful": "payment successful",
              "remove": "remove",
            },
            "flight-list-page": Object {
              "$": "$",
              "Afternoon": "Afternoon",
              "Airline": "Airline",
              "All time": "All time",
              "Book now": "Book now",
              "Cheapest price first": "Cheapest price first",
              "Clear": "Clear",
              "Delete": "Delete",
              "Direct": "Direct",
              "Early Morning": "Early Morning",
              "Evening": "Evening",
              "Flight details": "Flight details",
              "Fly time Fastest": "Fly time: Fastest",
              "From": "From",
              "Morning": "Morning",
              "OFF": "*{{number}}% OFF",
              "Order by": "Order by",
              "Price": "Price",
              "Price Low to High": "Price: Low to High",
              "Selected outbound": "Selected outbound",
              "Sorry we didn't find any results matching this search": "Sorry we didn't find any results matching this search",
              "Times": "Times",
              "To": "To",
              "flight-banner": Object {
                "Amazing journeys. Every day.": "Amazing journeys. Every day.",
                "EXPLORE THE WORLD WITH US": "EXPLORE THE WORLD WITH US",
              },
              "flights found": "{{number}} flights found",
              "hour": "hour",
            },
            "footer": Object {
              "About Us": "About Us",
              "Account": "Account",
              "Affiliate Program": "Affiliate Program",
              "Blog": "Blog",
              "CMail to our support team": "CMail to our support team",
              "Call 24/7 for any help": "Call 24/7 for any help",
              "Community program": "Community program",
              "Company": "Company",
              "Contact": "Contact",
              "Faq": "Faq",
              "Investor Relations": "Investor Relations",
              "Legal": "Legal",
              "Meet the Team": "Meet the Team",
              "Need any help?": "Need any help?",
              "Other Services": "Other Services",
              "Partners": "Partners",
              "PointsPLUS": "PointsPLUS",
              "Privacy Policy": "Privacy Policy",
              "Rewards": "Rewards",
              "Rewards Program": "Rewards Program",
              "Support": "Support",
              "Testimonials": "Testimonials",
              "Top cities": "Top cities",
              "Work with Us": "Work with Us",
            },
            "gate_day": Object {
              "delivery_modal": Object {
                "title": "Add New Delivery:",
              },
              "unassigned": "Unassigned",
            },
            "header": Object {
              "navbar": Object {
                "destination_booking": "Destination booking",
                "flight": "Flight",
                "flight_booking": "Flight booking",
                "home": "Home",
                "news": "News",
                "pages": "Pages",
                "top_destination": "Top destination",
                "tour": "Tour",
                "tour_booking": "Tour booking",
              },
            },
            "home-page": Object {
              "goBeyond-section": Object {
                "Gobeyond": "Go beyond your",
                "deal": "top deal",
                "discount": "7% Discount for all",
                "discount_airlines": "Airlines",
                "discover_your_ideal": "Discover your ideal experience with us",
                "imagination": "imagination",
                "resort": "Luxury resorts",
                "travel": "Travel around",
                "world": "the world",
              },
              "home-banner": Object {
                "THE WHOLE WORLD AWAITS": "THE WHOLE WORLD AWAITS",
              },
              "offer-area-section": Object {
                "Get tips": "Get tips",
                "Holiday deals": "Holiday deals",
                "Newsletter": "News letter",
                "Special Offers": "Special Offers",
                "Subscribe now": "Subscribe now",
                "Travel tips": "Travel tips",
              },
              "top-destinations-section": Object {
                "book-now": "Book Now",
                "holiday": "Holiday packages",
                "off": "Off",
                "title": "Top destinations",
                "up-to": "Up to",
                "view-all": "View all",
              },
            },
            "login": Object {
              "Don't have an account?": "Don't have an account?",
              "Email is not valid": "Email is not valid",
              "Enter password": "Enter password",
              "Enter your email": "Enter your email",
              "Forgot password?": "Forgot password?",
              "Logged in to stay in touch": "Logged in to stay in touch",
              "Login": "Login",
              "Please input your email!": "Please input your email!",
              "Please input your password": "Please input your password",
              "Register now": "Register now",
              "Welcome back": "Welcome back",
            },
            "mapping": Object {
              "delivery_status": "$t(delivery_status.{{status}})",
              "field": "$t(field.{{name}})",
              "order_history_action": "$t(order_history_action.{{action}})",
              "order_status": "$t(order_status.{{status}})",
              "order_timeslot": "$t(order_timeslot.{{value}})",
              "order_uploaded_status": "$t(natif_status.{{status}})",
            },
            "natif_status": Object {
              "0": "Init",
              "1": "Upload Processing",
              "2": "Upload Done",
              "3": "Upload Error",
              "4": "Natif Processing",
              "5": "Natif Done",
              "6": "Natif Error",
              "7": "Skip",
              "8": "Done",
            },
            "order": Object {
              "title": "Orders",
            },
            "order_detail": Object {
              "table_action": Object {
                "accept_confirm_date": "Accept Confirm Delivery Date",
                "accept_delivery_date": "Accept Delivery Date",
                "edit": "Edit Item",
                "edit_confirm_date": "Edit Confirm Delivery Date",
                "edit_delivery_date": "Edit Delivery Date",
              },
            },
            "order_document": Object {
              "upload": Object {
                "document_help": "PDF, DOC, DOCX, XLS, XLSX files only",
                "title": "Upload document for Order #{{orderId}}",
              },
            },
            "order_history_action": Object {
              "1": "Change Status",
              "10": "Upload Document",
              "11": "Delete Document",
              "2": "Add Note",
              "3": "Update Note",
              "4": "Update Order Info",
              "5": "Update Order Item",
              "6": "Update Delivery Date",
              "7": "Update Confirmation Date",
              "8": "Split",
              "9": "Upload File",
            },
            "order_status": Object {
              "0": "Pending",
              "1": "Supplier Approved",
              "2": "Arrival Confirmation",
              "3": "Cancelled",
              "4": "Approved",
              "5": "Delivered",
              "6": "Finished",
            },
            "order_timeslot": Object {
              "0000-0000": "No Timeslot",
              "08:00-12:00": "08:00-12:00",
              "12:00-15:00": "12:00-15:00",
              "15:00-18:00": "15:00-18:00",
            },
            "order_upload": Object {
              "parse_status": "Parse status: $t(natif_status.{{status}})",
              "process_manual": "Please process order manual on ECS",
              "title": "Parsed orders",
              "update_lines": "Update lines",
            },
            "order_upload_modal": Object {
              "field": Object {
                "help": "Choose file (pdf, csv)",
              },
              "file_note": "PDF or CSV",
              "title": "Upload order confirmation",
              "title_order": "Upload confirmation for Order #{{orderId}}",
            },
            "order_upload_report_modal": Object {
              "title": "Export Report",
            },
            "profile-page": Object {
              "Action": "Action",
              "Booking Amount": "Booking Amount",
              "Booking History": "Booking History",
              "Booking ID": "Booking ID",
              "Journey": "Journey",
              "My Booking": "My Booking",
              "My Profile": "My Profile",
              "Status": "Status",
            },
            "register": Object {
              "Already have an account?": "Already have an account?",
              "Enter password": "Enter password",
              "Enter your email": "Enter your email",
              "Enter your name": "Enter your name",
              "Enter your phone": "Enter your phone",
              "Login now": "Login now",
              "Register": "Register",
              "Register your account": "Register your account",
              "To join a whole new world": "To join a whole new world",
            },
            "search_form": Object {
              "Add return date": "Add return date",
              "No. of Passengers": "No. of Passengers",
              "business": "Business",
              "class": "Class",
              "economy": "Economy",
              "first_class": "First Class",
              "from": "From",
              "journey_date": "Journey Date",
              "one_way": "One Way",
              "passenger": "Passenger",
              "passenger_one": "{{count}} passenger",
              "passenger_other": "{{count}} passengers",
              "return_date": "Return Date",
              "round_trip": "Round Trip",
              "to": "To",
            },
            "subscribe-form": Object {
              "Enter your email address": "Enter your email address",
              "Get the latest news and offers": "Get the latest news and offers",
              "Subscribe": "Subscribe",
              "Subscribe to our newsletter": "Subscribe to our newsletter",
            },
          },
        },
        "vi": Object {
          "translations": Object {
            "common": Object {
              "action": "Action",
              "actions": "Actions",
              "all": "All",
              "asc": "Tháº¥p Äáº¿n cao",
              "at": "At",
              "available": "Available",
              "by": "By",
              "delete_confirm": "Are you sure to delete ?",
              "desc": "Cao Äáº¿n tháº¥p",
              "disabled": "Disabled",
              "documents": "Documents",
              "file_id": "File ID",
              "from": "From",
              "general_info": "General Info",
              "history": "History",
              "items": "Items",
              "log": "Logs",
              "note": "Notes",
              "order": "Sáº®P Xáº¾P",
              "split": "Split",
              "sum": "Sum",
              "summary": "Summary",
              "supplier_number": "{{number}} suppliers",
              "table_range": "{{from}} - {{to}} of {{total}} items",
              "to": "To",
              "total": "Total: {{number}}",
              "update": "Update",
              "update_confirm": "Are you sure to save this update ?",
              "zendesk_ticket": "Zendesk Ticket",
              "zendesk_user": "Zendesk User",
            },
            "cta": Object {
              "add": "ThÃªm",
              "adjust": "Adjust",
              "apply": "Apply",
              "approve_order": "Approve Order",
              "back_to_list": "Back to List",
              "become_partner": "Trá» thÃ nh Äá»i tÃ¡c",
              "business": "thÆ°Æ¡ng gia",
              "buy-it-now": "MUA NGAY",
              "cancel_order": "Cancel Order",
              "cancle": "Trá» vá»",
              "delete": "Delete",
              "delivered": "Delivered",
              "download": "Download",
              "download_order_csv": "CSV",
              "download_order_delivery_note": "Delivery Note (PDF)",
              "download_order_pdf": "Order (PDF)",
              "economy": "phá» thÃ´ng",
              "finish_order": "Set Finished",
              "force_supplier_approve": "Force Supplier Approval",
              "loading": "Äang táº£i",
              "login": "ÄÄng nháº­p",
              "logout": "ÄÄng xuáº¥t",
              "move": "Move",
              "place-holder-search": "Nháº­p Äá» gá»­i",
              "place_holder_input-email": "Gá»­i thÆ° gÃ³p Ã½",
              "refresh": "Refresh",
              "register": "ÄÄng kÃ½",
              "report": "Report",
              "save": "Save",
              "search": "TÃ¬m kiáº¿m",
              "show_history": "Show History",
              "split": "Split",
              "subscribe": "Gá»­i",
              "supplier_approve": "Supplier Approval",
              "update": "Cáº­p nháº­t",
              "upload": "Upload",
              "upload_order_confirmation": "Upload Confirmation",
            },
            "delivery_detail": Object {
              "cta": Object {
                "delete": "Delete this delivery",
              },
              "delete_confirmation": "Are you sure you want to delete delivery {{id}}",
              "field": Object {
                "finished_at": "Finished at",
                "paper": "{{supplier}}'s papers",
                "started_at": "Started at",
              },
              "tracked_time": "Tracked time",
            },
            "delivery_status": Object {
              "0": "Open",
              "1": "Confirmed",
              "2": "Arrived",
              "3": "In Progress",
              "4": "Finished",
              "5": "Cancelled",
            },
            "error": Object {
              "order_upload": Object {
                "missing_delivery_date": "Proposed delivery date of some order lines is missing in file.",
                "missing_lines": "There is some order lines missing in PDF file.",
              },
            },
            "field": Object {
              "booking_date": "Booking Date",
              "confirm_delivery": "Connox Confirm Delivery",
              "created_at": "Created At",
              "currency": "Currency",
              "date": "Date",
              "date_range": "Date range",
              "delivery_date": "Delivery Date",
              "description": "Description",
              "discount": "Discount",
              "duration": "Duration",
              "file": "File",
              "from_date": "From date",
              "id": "ID",
              "item_id": "Item ID",
              "name": "Name",
              "net_base_price": "Net Base Price",
              "net_price": "Net Price",
              "no": "No",
              "order_date": "Order Date",
              "order_id": "Order ID",
              "order_name": "Order Name",
              "parent_distributor_order_id": "Split From",
              "payment_method": "Payment Method",
              "payment_terms_date": "Payment Terms Date",
              "payment_terms_in_days": "Payment Terms In Days",
              "position": "Position",
              "proposed_delivery": "Proposed Delivery",
              "quantity": "Sá» lÆ°á»£ng",
              "reference_no": "Reference Nr",
              "remarks": "Remarks",
              "select_detail_page": "HÃ£y chá»n mÃ u, khung vÃ  kÃ­ch cá»¡ cá»§a xe",
              "start_at": "Start At",
              "status": "Status",
              "supplier": "Supplier",
              "supplier_id": "Supplier ID",
              "supplier_sku": "Supplier SKU",
              "thresholds": "Thresholds",
              "timeslot": "Timeslot",
              "to_date": "To date",
              "total_amount": "Total Amount",
              "total_gross": "Gross Total",
              "total_positions": "Total Positions",
              "updated_at": "Updated At",
              "uploaded_by": "Uploaded By",
              "user": "User",
              "warehouse": "Warehouse",
            },
            "filter": Object {},
            "flight-booking-page": Object {
              "All toll tax, parking, fuel, and driver allowances": "Táº¥t cáº£ thuáº¿ phÃ­, Äáº­u xe, nhiÃªn liá»u vÃ  phá»¥ cáº¥p lÃ¡i xe",
              "Apartment": "Äá»a chá» nhÃ ",
              "Apply voucher": "Ãp dá»¥ng phiáº¿u giáº£m giÃ¡",
              "Booking amount": "Tiá»n Äáº·t",
              "Buffet breakfast as per the Itinerary": "Bá»¯a sÃ¡ng tá»± chá»n theo hÃ nh trÃ¬nh",
              "Comfortable and hygienic vehicle": "Xe thoáº£i mÃ¡i vÃ  há»£p vá» sinh",
              "Complimentary Camel safari, Bonfire": "Miá»n phÃ­ Camel safari, Bonfire",
              "Continue to payment": "Tiáº¿p tá»¥c thanh toÃ¡n",
              "Coupon code": "MÃ£ giáº£m giÃ¡",
              "Discount": "Giáº£m",
              "Economy Price": "GiÃ¡ háº¡ng phá» thÃ´ng",
              "Email address": "Äá»a chá» email",
              "First name": "TÃªn",
              "Flights": "Chuyáº¿n bay",
              "From": "Tá»«",
              "I have read the": "TÃ´i ÄÃ£ Äá»c",
              "Mobile number": "Sá» Äiá»n thoáº¡i",
              "OFF": "Giáº£m",
              "Optional": "TÃ¹y chá»n",
              "Passenger information": "ThÃ´ng tin hÃ nh khÃ¡ch",
              "Passport no.": "Sá» há» chiáº¿u",
              "Pay Now": "Thanh toÃ¡n ngay",
              "Payment methods": "PhÆ°Æ¡ng thá»©c thanh toÃ¡n",
              "Please input your E-mail!": "Xin vui lÃ²ng nháº­p E-mail!",
              "Please input your Passport!": "Xin vui lÃ²ng nháº­p mÃ£ sá» há» chiáº¿u!",
              "Please input your apartment!": "Xin vui lÃ²ng nháº­p Äá»a chá» nhÃ !",
              "Please input your birthdate!": "Xin vui lÃ²ng nháº­p ngÃ y sinh!",
              "Please input your first name!": "Xin vui lÃ²ng nháº­p TÃªn!",
              "Please input your phone number!": "Xin vui lÃ²ng nháº­p sá» Äiá»n thoáº¡i!",
              "Please input your street address!": "Xin vui lÃ²ng nháº­p Äá»a chá» ÄÆ°á»ng!",
              "Please input your visa!": "Xin vui lÃ²ng nháº­p mÃ£ sá» visa!",
              "Prices": "GiÃ¡",
              "Should accept agreement": "Báº¡n chÆ°a Äá»ng Ã½ vá»i thá»a thuáº­n",
              "Street address": "Äá»a chá» ÄÆ°á»ng",
              "Subtotal": "Táº¡m tÃ­nh",
              "Tax": "Tax",
              "To": "Äáº¿n",
              "Total Amount": "Tá»ng giÃ¡",
              "Visa no.": "MÃ£ sá» Visa",
              "Visit eight villages showcasing Polynesian culture": "GhÃ© thÄm tÃ¡m ngÃ´i lÃ ng thá» hiá»n vÄn hÃ³a Polynesia",
              "Your birthdate": "NgÃ y Sinh cá»§a báº¡n",
              "agreement": "thá»a thuáº­n",
              "hours": "giá»",
              "input your discount number": "Nháº­p mÃ£ giáº£m giÃ¡",
              "minutes": "phÃºt",
              "multiply price": "GiÃ¡ $t(cta.{{class}}) x {{multiply}}",
              "payment successful": "Thanh toÃ¡n thÃ nh cÃ´ng",
              "remove": "xÃ³a",
            },
            "flight-list-page": Object {
              "$": "â«",
              "Afternoon": "Chiá»u",
              "Airline": "HÃ£ng hÃ ng khÃ´ng",
              "All time": "Má»i lÃºc",
              "Book now": "Äáº·t ngay",
              "Cheapest price first": "Cheapest price first",
              "Clear": "XÃ³a",
              "Delete": "XÃ³a bá»",
              "Direct": "Bay tháº³ng",
              "Early Morning": "Ráº¡ng sÃ¡ng",
              "Evening": "Tá»i",
              "Flight details": "Chi tiáº¿t",
              "Fly time Fastest": "Thá»i gian: Nhanh nháº¥t",
              "From": "Tá»«",
              "Morning": "SÃ¡ng",
              "OFF": "*GIáº¢M {{number}}%",
              "Order by": "Sáº¯p xáº¿p theo",
              "Price": "GiÃ¡",
              "Price Low to High": "GiÃ¡: Tháº¥p Äáº¿n Cao",
              "Selected outbound": "ÄÃ£ chá»n",
              "Sorry we didn't find any results matching this search": "Xin lá»i chÃºng tÃ´i khÃ´ng thá» tÃ¬m tháº¥y káº¿t quáº£ phÃ¹ há»£p",
              "Times": "Buá»i",
              "To": "Äáº¿n",
              "flight-banner": Object {
                "Amazing journeys. Every day.": "Nhá»¯ng cuá»c hÃ nh trÃ¬nh tuyá»t vá»i. Má»i ngÃ y.",
                "EXPLORE THE WORLD WITH US": "HÃY CÃNG CHÃNG TÃI KHÃM PHÃ THáº¾ GIá»I",
              },
              "flights found": "{{number}} chuyáº¿n bay",
              "hour": "giá»",
            },
            "footer": Object {
              "About Us": "Vá» chÃºng tÃ´i",
              "Account": "TÃ i khoáº£n",
              "Affiliate Program": "ChÆ°Æ¡ng trÃ¬nh liÃªn káº¿t",
              "Blog": "Blog",
              "CMail to our support team": "Mail Äá»i ngÅ© há» trá»£ cá»§a chÃºng tÃ´i",
              "Call 24/7 for any help": "Gá»i 24/7",
              "Community program": "ChÆ°Æ¡ng trÃ¬nh cá»ng Äá»ng",
              "Company": "CÃ´ng ty",
              "Contact": "LiÃªn há»",
              "Faq": "CÃ¢u há»i thÆ°á»ng gáº­p",
              "Investor Relations": "Quan há» Äáº§u tÆ°",
              "Legal": "Há»£p phÃ¡p",
              "Meet the Team": "Gáº·p gá»¡ Äá»i ngÅ©",
              "Need any help?": "Cáº§n trá»£ giÃºp?",
              "Other Services": "CÃ¡c dá»ch vá»¥ khÃ¡c",
              "Partners": "Äá»i tÃ¡c",
              "PointsPLUS": "PointsPLUS",
              "Privacy Policy": "ChÃ­nh sÃ¡ch báº£o máº­t",
              "Rewards": "Pháº§n thÆ°á»ng",
              "Rewards Program": "ChÆ°Æ¡ng trÃ¬nh khen thÆ°á»ng",
              "Support": "Há» trá»£",
              "Testimonials": "Lá»i chá»©ng thá»±c",
              "Top cities": "CÃ¡c thÃ nh phá» hÃ ng Äáº§u",
              "Work with Us": "LÃ m viá»c vá»i chÃºng tÃ´i",
            },
            "gate_day": Object {
              "delivery_modal": Object {
                "title": "Add New Delivery:",
              },
              "unassigned": "Unassigned",
            },
            "header": Object {
              "navbar": Object {
                "destination_booking": "Äáº·t Äiá»m Äáº¿n",
                "flight": "Chuyáº¿n bay",
                "flight_booking": "Äáº·t chuyáº¿n bay",
                "home": "Trang chá»§",
                "news": "TÃ­n tá»©c",
                "pages": "Trang khÃ¡c",
                "top_destination": "Äiá»m Äáº¿n hÃ ng Äáº§u",
                "tour": "Chuyáº¿n du lá»ch",
                "tour_booking": "Äáº·t chuyáº¿n du lá»ch",
              },
            },
            "home-page": Object {
              "goBeyond-section": Object {
                "Gobeyond": "VÆ°á»£t ra khá»i",
                "deal": "vá»i nhiá»u Æ°u ÄÃ£i",
                "discount": "Giáº£m 7% cho táº¥t cáº£",
                "discount_airlines": "cÃ¡c hÃ£ng hÃ ng khÃ´ng",
                "discover_your_ideal": "CÃ¹ng chÃºng tÃ´i khÃ¡m phÃ¡ nhá»¯ng tráº£i nghiá»m tuyá»t vá»i",
                "imagination": "trÃ­ tÆ°á»ng tÆ°á»£ng",
                "resort": "Resorts sang trá»ng",
                "travel": "Äi kháº¯p",
                "world": "Tháº¿ giá»i",
              },
              "home-banner": Object {
                "THE WHOLE WORLD AWAITS": "Cáº¢ THáº¾ GIá»I ÄANG Äá»¢I Báº N",
              },
              "offer-area-section": Object {
                "Get tips": "Nháº­n ngay",
                "Holiday deals": "Ká»³ nghÄ© Æ°u ÄÃ£i",
                "Newsletter": "Báº£n tin",
                "Special Offers": "Æ¯u ÄÃ£i Äáº·c biá»t",
                "Subscribe now": "ÄÄng kÃ½ ngay",
                "Travel tips": "Giáº£i phÃ¡p du lá»ch",
              },
              "top-destinations-section": Object {
                "book-now": "Äáº·t ngay",
                "holiday": "GÃ³i nghÄ© dÆ°á»¡ng",
                "off": "",
                "title": "Äiá»m Äáº¿n hÃ ng Äáº§u",
                "up-to": "Giáº£m Äáº¿n",
                "view-all": "Táº¥t cáº£",
              },
            },
            "login": Object {
              "Don't have an account?": "KhÃ´ng cÃ³ tÃ i khoáº£n?",
              "Email is not valid": "Email khÃ´ng há»£p lá»",
              "Enter password": "Nháº­p máº­t kháº©u cá»§a báº¡n",
              "Enter your email": "Nháº­p email cá»§a báº¡n",
              "Forgot password?": "QuÃªn máº­t kháº©u?",
              "Logged in to stay in touch": "ÄÄng nháº­p Äá» giá»¯ liÃªn láº¡c",
              "Login": "ÄÄng nháº­p",
              "Please input your email": "Vui lÃ²ng nháº­p vÃ o email cá»§a báº¡n",
              "Please input your password": "Vui lÃ²ng nháº­p vÃ o password cá»§a báº¡n",
              "Register now": "ÄÄng kÃ½ ngay",
              "Welcome back": "Má»«ng báº¡n quay láº¡i",
            },
            "mapping": Object {
              "delivery_status": "$t(delivery_status.{{status}})",
              "field": "$t(field.{{name}})",
              "order_history_action": "$t(order_history_action.{{action}})",
              "order_status": "$t(order_status.{{status}})",
              "order_timeslot": "$t(order_timeslot.{{value}})",
              "order_uploaded_status": "$t(natif_status.{{status}})",
            },
            "natif_status": Object {
              "0": "Init",
              "1": "Upload Processing",
              "2": "Upload Done",
              "3": "Upload Error",
              "4": "Natif Processing",
              "5": "Natif Done",
              "6": "Natif Error",
              "7": "Skip",
              "8": "Done",
            },
            "order": Object {
              "title": "Orders",
            },
            "order_detail": Object {
              "table_action": Object {
                "accept_confirm_date": "Accept Confirm Delivery Date",
                "accept_delivery_date": "Accept Delivery Date",
                "edit": "Edit Item",
                "edit_confirm_date": "Edit Confirm Delivery Date",
                "edit_delivery_date": "Edit Delivery Date",
              },
            },
            "order_document": Object {
              "upload": Object {
                "document_help": "PDF, DOC, DOCX, XLS, XLSX files only",
                "title": "Upload document for Order #{{orderId}}",
              },
            },
            "order_history_action": Object {
              "1": "Change Status",
              "10": "Upload Document",
              "11": "Delete Document",
              "2": "Add Note",
              "3": "Update Note",
              "4": "Update Order Info",
              "5": "Update Order Item",
              "6": "Update Delivery Date",
              "7": "Update Confirmation Date",
              "8": "Split",
              "9": "Upload File",
            },
            "order_status": Object {
              "0": "Pending",
              "1": "Supplier Approved",
              "2": "Arrival Confirmation",
              "3": "Cancelled",
              "4": "Approved",
              "5": "Delivered",
              "6": "Finished",
            },
            "order_timeslot": Object {
              "0000-0000": "No Timeslot",
              "08:00-12:00": "08:00-12:00",
              "12:00-15:00": "12:00-15:00",
              "15:00-18:00": "15:00-18:00",
            },
            "order_upload": Object {
              "parse_status": "Parse status: $t(natif_status.{{status}})",
              "process_manual": "Please process order manual on ECS",
              "title": "Parsed orders",
              "update_lines": "Update lines",
            },
            "order_upload_modal": Object {
              "field": Object {
                "help": "Choose file (pdf, csv)",
              },
              "file_note": "PDF or CSV",
              "title": "Upload order confirmation",
              "title_order": "Upload confirmation for Order #{{orderId}}",
            },
            "order_upload_report_modal": Object {
              "title": "Export Report",
            },
            "profile-page": Object {
              "Action": "Action",
              "Booking Amount": "Booking Amount",
              "Booking History": "Booking History",
              "Booking ID": "Booking ID",
              "Journey": "Journey",
              "My Booking": "My Booking",
              "My Profile": "My Profile",
              "Status": "Status",
            },
            "register": Object {
              "Already have an account?": "ÄÃ£ cÃ³ tÃ i khoáº£n.",
              "Enter password": "Nháº­p máº­t kháº©u",
              "Enter your email": "Nháº­p email",
              "Enter your name": "Nháº­p tÃªn tÃ i khoáº£n",
              "Enter your phone": "Nháº­p sá» Äiá»n thoáº¡i",
              "Login now": "ÄÄng nháº­p ngay",
              "Register": "ÄÄng kÃ½",
              "Register your account": "ÄÄng kÃ½ tÃ i khoáº£n",
              "To join a whole new world": "Tham gia vÃ o má»t tháº¿ giá»i hoÃ n toÃ n má»i",
            },
            "search_form": Object {
              "Add return date": "ThÃªm ngÃ y vá»",
              "No. of Passengers": "Sá» hÃ nh khÃ¡ch",
              "business": "ThÆ°Æ¡ng gia",
              "class": "Háº¡ng gháº¿",
              "economy": "Phá» thÃ´ng",
              "first_class": "Háº¡ng nháº¥t",
              "from": "Tá»«",
              "journey_date": "NgÃ y Äi",
              "one_way": "Má»t Chiá»u",
              "passenger": "HÃ nh khÃ¡ch",
              "passenger_one": "{{count}} HÃ nh khÃ¡ch",
              "passenger_other": "{{count}} HÃ nh khÃ¡ch",
              "return_date": "NgÃ y Vá»",
              "round_trip": "Khá»© Há»i",
              "to": "Äáº¿n",
            },
            "subscribe-form": Object {
              "Enter your email address": "Nháº­p vÃ o email cá»§a báº¡n",
              "Get the latest news and offers": "Nháº­n thÃ´ng tin vÃ  Æ°u ÄÃ£i má»i nháº¥t",
              "Subscribe": "ÄÄng kÃ½",
              "Subscribe to our newsletter": "ÄÄng kÃ½ nháº­n báº£n tin tá»« chÃºng tÃ´i",
            },
          },
        },
      },
    }
  }
>
  <Provider
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ConfigProvider>
      <LocaleReceiver
        componentName="global"
      >
        <ProviderChildren
          parentContext={
            Object {
              "getPrefixCls": [Function],
            }
          }
        >
          <BrowserRouter>
            <Router
              location={
                Object {
                  "hash": "",
                  "key": "default",
                  "pathname": "/",
                  "search": "",
                  "state": null,
                }
              }
              navigationType="POP"
              navigator={
                Object {
                  "action": "POP",
                  "back": [Function],
                  "block": [Function],
                  "createHref": [Function],
                  "forward": [Function],
                  "go": [Function],
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "default",
                    "pathname": "/",
                    "search": "",
                    "state": null,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
            >
              <Suspense>
                <Register>
                  <div
                    className="register-page"
                  >
                    <RegisterBanner>
                      <section
                        className="flight-list-banner"
                      >
                        <div
                          className="grid wide"
                        >
                          <div
                            className="flight-list-banner__text"
                          >
                            <ForwardRef(MotionComponent)
                              animate={
                                Object {
                                  "opacity": 1,
                                  "x": 0,
                                }
                              }
                              initial={
                                Object {
                                  "opacity": 0,
                                  "x": -200,
                                }
                              }
                              transition={
                                Object {
                                  "duration": 1,
                                }
                              }
                            >
                              <VisualElementHandler
                                props={
                                  Object {
                                    "animate": Object {
                                      "opacity": 1,
                                      "x": 0,
                                    },
                                    "children": <ForwardRef(Title)
                                      level={1}
                                    >
                                      Register your account
                                    </ForwardRef(Title)>,
                                    "initial": Object {
                                      "opacity": 0,
                                      "x": -200,
                                    },
                                    "isStatic": false,
                                    "layoutId": undefined,
                                    "reducedMotion": "never",
                                    "transformPagePoint": [Function],
                                    "transition": Object {
                                      "duration": 1,
                                    },
                                  }
                                }
                                visualElement={
                                  Object {
                                    "addValue": [Function],
                                    "addVariantChild": [Function],
                                    "animationState": Object {
                                      "animateChanges": [Function],
                                      "getState": [Function],
                                      "isAnimated": [Function],
                                      "setActive": [Function],
                                      "setAnimateFunction": [Function],
                                    },
                                    "blockInitialAnimation": false,
                                    "build": [Function],
                                    "children": Set {},
                                    "clearAllListeners": [Function],
                                    "current": <div
                                      style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                    >
                                      <h1
                                        class="ant-typography"
                                      >
                                        Register your account
                                      </h1>
                                    </div>,
                                    "depth": 0,
                                    "forEachValue": [Function],
                                    "getBaseTarget": [Function],
                                    "getClosestVariantNode": [Function],
                                    "getDefaultTransition": [Function],
                                    "getInstance": [Function],
                                    "getLatestValues": [Function],
                                    "getLayoutId": [Function],
                                    "getProps": [Function],
                                    "getStaticValue": [Function],
                                    "getTransformPagePoint": [Function],
                                    "getValue": [Function],
                                    "getVariant": [Function],
                                    "getVariantContext": [Function],
                                    "hasValue": [Function],
                                    "isMounted": [Function],
                                    "isVisible": undefined,
                                    "makeTargetAnimatable": [Function],
                                    "manuallyAnimateOnMount": false,
                                    "measureViewportBox": [Function],
                                    "mount": [Function],
                                    "notifyAnimationComplete": [Function],
                                    "notifyAnimationStart": [Function],
                                    "notifyBeforeLayoutMeasure": [Function],
                                    "notifyLayoutAnimationComplete": [Function],
                                    "notifyLayoutAnimationStart": [Function],
                                    "notifyLayoutMeasure": [Function],
                                    "notifyLayoutUpdate": [Function],
                                    "notifyRender": [Function],
                                    "notifySetAxisTarget": [Function],
                                    "notifyUnmount": [Function],
                                    "notifyUpdate": [Function],
                                    "notifyViewportBoxUpdate": [Function],
                                    "onAnimationComplete": [Function],
                                    "onAnimationStart": [Function],
                                    "onBeforeLayoutMeasure": [Function],
                                    "onLayoutAnimationComplete": [Function],
                                    "onLayoutAnimationStart": [Function],
                                    "onLayoutMeasure": [Function],
                                    "onLayoutUpdate": [Function],
                                    "onRender": [Function],
                                    "onSetAxisTarget": [Function],
                                    "onUnmount": [Function],
                                    "onUpdate": [Function],
                                    "onViewportBoxUpdate": [Function],
                                    "parent": undefined,
                                    "presenceId": undefined,
                                    "projection": ProjectionNode {
                                      "animationProgress": 0,
                                      "checkUpdateFailed": [Function],
                                      "children": Set {},
                                      "depth": 1,
                                      "eventHandlers": Map {},
                                      "hasProjected": false,
                                      "id": undefined,
                                      "instance": <div
                                        style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                      >
                                        <h1
                                          class="ant-typography"
                                        >
                                          Register your account
                                        </h1>
                                      </div>,
                                      "isAnimationBlocked": false,
                                      "isLayoutDirty": false,
                                      "isSVG": false,
                                      "isTreeAnimating": false,
                                      "isUpdating": false,
                                      "isVisible": true,
                                      "latestValues": Object {
                                        "opacity": 0,
                                        "x": -200,
                                      },
                                      "needsReset": false,
                                      "options": Object {
                                        "alwaysMeasureLayout": undefined,
                                        "animationType": "both",
                                        "crossfade": true,
                                        "initialPromotionConfig": Object {},
                                        "layout": undefined,
                                        "layoutId": undefined,
                                        "layoutScroll": undefined,
                                        "scheduleRender": [Function],
                                        "visualElement": [Circular],
                                      },
                                      "parent": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {
                                          [Circular],
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {},
                                            "depth": 1,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": undefined,
                                            "instance": <div
                                              style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                            >
                                              <h3
                                                class="ant-typography"
                                              >
                                                To join a whole new world
                                              </h3>
                                            </div>,
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {
                                              "opacity": 0,
                                              "x": 200,
                                            },
                                            "needsReset": false,
                                            "options": Object {
                                              "alwaysMeasureLayout": undefined,
                                              "animationType": "both",
                                              "crossfade": true,
                                              "initialPromotionConfig": Object {},
                                              "layout": undefined,
                                              "layoutId": undefined,
                                              "layoutScroll": undefined,
                                              "scheduleRender": [Function],
                                              "visualElement": Object {
                                                "addValue": [Function],
                                                "addVariantChild": [Function],
                                                "animationState": Object {
                                                  "animateChanges": [Function],
                                                  "getState": [Function],
                                                  "isAnimated": [Function],
                                                  "setActive": [Function],
                                                  "setAnimateFunction": [Function],
                                                },
                                                "blockInitialAnimation": false,
                                                "build": [Function],
                                                "children": Set {},
                                                "clearAllListeners": [Function],
                                                "current": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "depth": 0,
                                                "forEachValue": [Function],
                                                "getBaseTarget": [Function],
                                                "getClosestVariantNode": [Function],
                                                "getDefaultTransition": [Function],
                                                "getInstance": [Function],
                                                "getLatestValues": [Function],
                                                "getLayoutId": [Function],
                                                "getProps": [Function],
                                                "getStaticValue": [Function],
                                                "getTransformPagePoint": [Function],
                                                "getValue": [Function],
                                                "getVariant": [Function],
                                                "getVariantContext": [Function],
                                                "hasValue": [Function],
                                                "isMounted": [Function],
                                                "isVisible": undefined,
                                                "makeTargetAnimatable": [Function],
                                                "manuallyAnimateOnMount": false,
                                                "measureViewportBox": [Function],
                                                "mount": [Function],
                                                "notifyAnimationComplete": [Function],
                                                "notifyAnimationStart": [Function],
                                                "notifyBeforeLayoutMeasure": [Function],
                                                "notifyLayoutAnimationComplete": [Function],
                                                "notifyLayoutAnimationStart": [Function],
                                                "notifyLayoutMeasure": [Function],
                                                "notifyLayoutUpdate": [Function],
                                                "notifyRender": [Function],
                                                "notifySetAxisTarget": [Function],
                                                "notifyUnmount": [Function],
                                                "notifyUpdate": [Function],
                                                "notifyViewportBoxUpdate": [Function],
                                                "onAnimationComplete": [Function],
                                                "onAnimationStart": [Function],
                                                "onBeforeLayoutMeasure": [Function],
                                                "onLayoutAnimationComplete": [Function],
                                                "onLayoutAnimationStart": [Function],
                                                "onLayoutMeasure": [Function],
                                                "onLayoutUpdate": [Function],
                                                "onRender": [Function],
                                                "onSetAxisTarget": [Function],
                                                "onUnmount": [Function],
                                                "onUpdate": [Function],
                                                "onViewportBoxUpdate": [Function],
                                                "parent": undefined,
                                                "presenceId": undefined,
                                                "projection": [Circular],
                                                "readValue": [Function],
                                                "removeValue": [Function],
                                                "scheduleRender": [Function],
                                                "setBaseTarget": [Function],
                                                "setProps": [Function],
                                                "setStaticValue": [Function],
                                                "setVisibility": [Function],
                                                "shouldReduceMotion": false,
                                                "sortNodePosition": [Function],
                                                "syncRender": [Function],
                                                "treeType": "dom",
                                                "unmount": [Function],
                                                "updatePropListeners": [Function],
                                                "variantChildren": undefined,
                                              },
                                            },
                                            "parent": [Circular],
                                            "path": Array [
                                              [Circular],
                                            ],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": false,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                        },
                                        "depth": 0,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": 0,
                                        "instance": [Window],
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {},
                                        "needsReset": false,
                                        "nodes": FlatTree {
                                          "children": Array [
                                            [Circular],
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                              >
                                                <h3
                                                  class="ant-typography"
                                                >
                                                  To join a whole new world
                                                </h3>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": 200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                          ],
                                          "isDirty": true,
                                        },
                                        "options": Object {
                                          "crossfade": true,
                                          "layoutScroll": true,
                                        },
                                        "parent": undefined,
                                        "path": Array [],
                                        "potentialNodes": Map {},
                                        "root": [Circular],
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": true,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "path": Array [
                                        ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                              >
                                                <h3
                                                  class="ant-typography"
                                                >
                                                  To join a whole new world
                                                </h3>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": 200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": 200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                    >
                                                      <h3
                                                        class="ant-typography"
                                                      >
                                                        To join a whole new world
                                                      </h3>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                      ],
                                      "potentialNodes": Map {},
                                      "root": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {
                                          [Circular],
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {},
                                            "depth": 1,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": undefined,
                                            "instance": <div
                                              style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                            >
                                              <h3
                                                class="ant-typography"
                                              >
                                                To join a whole new world
                                              </h3>
                                            </div>,
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {
                                              "opacity": 0,
                                              "x": 200,
                                            },
                                            "needsReset": false,
                                            "options": Object {
                                              "alwaysMeasureLayout": undefined,
                                              "animationType": "both",
                                              "crossfade": true,
                                              "initialPromotionConfig": Object {},
                                              "layout": undefined,
                                              "layoutId": undefined,
                                              "layoutScroll": undefined,
                                              "scheduleRender": [Function],
                                              "visualElement": Object {
                                                "addValue": [Function],
                                                "addVariantChild": [Function],
                                                "animationState": Object {
                                                  "animateChanges": [Function],
                                                  "getState": [Function],
                                                  "isAnimated": [Function],
                                                  "setActive": [Function],
                                                  "setAnimateFunction": [Function],
                                                },
                                                "blockInitialAnimation": false,
                                                "build": [Function],
                                                "children": Set {},
                                                "clearAllListeners": [Function],
                                                "current": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "depth": 0,
                                                "forEachValue": [Function],
                                                "getBaseTarget": [Function],
                                                "getClosestVariantNode": [Function],
                                                "getDefaultTransition": [Function],
                                                "getInstance": [Function],
                                                "getLatestValues": [Function],
                                                "getLayoutId": [Function],
                                                "getProps": [Function],
                                                "getStaticValue": [Function],
                                                "getTransformPagePoint": [Function],
                                                "getValue": [Function],
                                                "getVariant": [Function],
                                                "getVariantContext": [Function],
                                                "hasValue": [Function],
                                                "isMounted": [Function],
                                                "isVisible": undefined,
                                                "makeTargetAnimatable": [Function],
                                                "manuallyAnimateOnMount": false,
                                                "measureViewportBox": [Function],
                                                "mount": [Function],
                                                "notifyAnimationComplete": [Function],
                                                "notifyAnimationStart": [Function],
                                                "notifyBeforeLayoutMeasure": [Function],
                                                "notifyLayoutAnimationComplete": [Function],
                                                "notifyLayoutAnimationStart": [Function],
                                                "notifyLayoutMeasure": [Function],
                                                "notifyLayoutUpdate": [Function],
                                                "notifyRender": [Function],
                                                "notifySetAxisTarget": [Function],
                                                "notifyUnmount": [Function],
                                                "notifyUpdate": [Function],
                                                "notifyViewportBoxUpdate": [Function],
                                                "onAnimationComplete": [Function],
                                                "onAnimationStart": [Function],
                                                "onBeforeLayoutMeasure": [Function],
                                                "onLayoutAnimationComplete": [Function],
                                                "onLayoutAnimationStart": [Function],
                                                "onLayoutMeasure": [Function],
                                                "onLayoutUpdate": [Function],
                                                "onRender": [Function],
                                                "onSetAxisTarget": [Function],
                                                "onUnmount": [Function],
                                                "onUpdate": [Function],
                                                "onViewportBoxUpdate": [Function],
                                                "parent": undefined,
                                                "presenceId": undefined,
                                                "projection": [Circular],
                                                "readValue": [Function],
                                                "removeValue": [Function],
                                                "scheduleRender": [Function],
                                                "setBaseTarget": [Function],
                                                "setProps": [Function],
                                                "setStaticValue": [Function],
                                                "setVisibility": [Function],
                                                "shouldReduceMotion": false,
                                                "sortNodePosition": [Function],
                                                "syncRender": [Function],
                                                "treeType": "dom",
                                                "unmount": [Function],
                                                "updatePropListeners": [Function],
                                                "variantChildren": undefined,
                                              },
                                            },
                                            "parent": [Circular],
                                            "path": Array [
                                              [Circular],
                                            ],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": false,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                        },
                                        "depth": 0,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": 0,
                                        "instance": [Window],
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {},
                                        "needsReset": false,
                                        "nodes": FlatTree {
                                          "children": Array [
                                            [Circular],
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                              >
                                                <h3
                                                  class="ant-typography"
                                                >
                                                  To join a whole new world
                                                </h3>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": 200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                          ],
                                          "isDirty": true,
                                        },
                                        "options": Object {
                                          "crossfade": true,
                                          "layoutScroll": true,
                                        },
                                        "parent": undefined,
                                        "path": Array [],
                                        "potentialNodes": Map {},
                                        "root": [Circular],
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": true,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "sharedNodes": Map {},
                                      "shouldResetTransform": false,
                                      "treeScale": Object {
                                        "x": 1,
                                        "y": 1,
                                      },
                                      "updateBlockedByResize": false,
                                      "updateManuallyBlocked": false,
                                      "updateProjection": [Function],
                                    },
                                    "readValue": [Function],
                                    "removeValue": [Function],
                                    "scheduleRender": [Function],
                                    "setBaseTarget": [Function],
                                    "setProps": [Function],
                                    "setStaticValue": [Function],
                                    "setVisibility": [Function],
                                    "shouldReduceMotion": false,
                                    "sortNodePosition": [Function],
                                    "syncRender": [Function],
                                    "treeType": "dom",
                                    "unmount": [Function],
                                    "updatePropListeners": [Function],
                                    "variantChildren": undefined,
                                  }
                                }
                              >
                                <Component
                                  animate={
                                    Object {
                                      "opacity": 1,
                                      "x": 0,
                                    }
                                  }
                                  initial={
                                    Object {
                                      "opacity": 0,
                                      "x": -200,
                                    }
                                  }
                                  key="animation"
                                  transition={
                                    Object {
                                      "duration": 1,
                                    }
                                  }
                                  visualElement={
                                    Object {
                                      "addValue": [Function],
                                      "addVariantChild": [Function],
                                      "animationState": Object {
                                        "animateChanges": [Function],
                                        "getState": [Function],
                                        "isAnimated": [Function],
                                        "setActive": [Function],
                                        "setAnimateFunction": [Function],
                                      },
                                      "blockInitialAnimation": false,
                                      "build": [Function],
                                      "children": Set {},
                                      "clearAllListeners": [Function],
                                      "current": <div
                                        style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                      >
                                        <h1
                                          class="ant-typography"
                                        >
                                          Register your account
                                        </h1>
                                      </div>,
                                      "depth": 0,
                                      "forEachValue": [Function],
                                      "getBaseTarget": [Function],
                                      "getClosestVariantNode": [Function],
                                      "getDefaultTransition": [Function],
                                      "getInstance": [Function],
                                      "getLatestValues": [Function],
                                      "getLayoutId": [Function],
                                      "getProps": [Function],
                                      "getStaticValue": [Function],
                                      "getTransformPagePoint": [Function],
                                      "getValue": [Function],
                                      "getVariant": [Function],
                                      "getVariantContext": [Function],
                                      "hasValue": [Function],
                                      "isMounted": [Function],
                                      "isVisible": undefined,
                                      "makeTargetAnimatable": [Function],
                                      "manuallyAnimateOnMount": false,
                                      "measureViewportBox": [Function],
                                      "mount": [Function],
                                      "notifyAnimationComplete": [Function],
                                      "notifyAnimationStart": [Function],
                                      "notifyBeforeLayoutMeasure": [Function],
                                      "notifyLayoutAnimationComplete": [Function],
                                      "notifyLayoutAnimationStart": [Function],
                                      "notifyLayoutMeasure": [Function],
                                      "notifyLayoutUpdate": [Function],
                                      "notifyRender": [Function],
                                      "notifySetAxisTarget": [Function],
                                      "notifyUnmount": [Function],
                                      "notifyUpdate": [Function],
                                      "notifyViewportBoxUpdate": [Function],
                                      "onAnimationComplete": [Function],
                                      "onAnimationStart": [Function],
                                      "onBeforeLayoutMeasure": [Function],
                                      "onLayoutAnimationComplete": [Function],
                                      "onLayoutAnimationStart": [Function],
                                      "onLayoutMeasure": [Function],
                                      "onLayoutUpdate": [Function],
                                      "onRender": [Function],
                                      "onSetAxisTarget": [Function],
                                      "onUnmount": [Function],
                                      "onUpdate": [Function],
                                      "onViewportBoxUpdate": [Function],
                                      "parent": undefined,
                                      "presenceId": undefined,
                                      "projection": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {},
                                        "depth": 1,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": undefined,
                                        "instance": <div
                                          style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                        >
                                          <h1
                                            class="ant-typography"
                                          >
                                            Register your account
                                          </h1>
                                        </div>,
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {
                                          "opacity": 0,
                                          "x": -200,
                                        },
                                        "needsReset": false,
                                        "options": Object {
                                          "alwaysMeasureLayout": undefined,
                                          "animationType": "both",
                                          "crossfade": true,
                                          "initialPromotionConfig": Object {},
                                          "layout": undefined,
                                          "layoutId": undefined,
                                          "layoutScroll": undefined,
                                          "scheduleRender": [Function],
                                          "visualElement": [Circular],
                                        },
                                        "parent": ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                              >
                                                <h3
                                                  class="ant-typography"
                                                >
                                                  To join a whole new world
                                                </h3>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": 200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": 200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                    >
                                                      <h3
                                                        class="ant-typography"
                                                      >
                                                        To join a whole new world
                                                      </h3>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                        "path": Array [
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": 200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                    >
                                                      <h3
                                                        class="ant-typography"
                                                      >
                                                        To join a whole new world
                                                      </h3>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                            },
                                            "depth": 0,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": 0,
                                            "instance": [Window],
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {},
                                            "needsReset": false,
                                            "nodes": FlatTree {
                                              "children": Array [
                                                [Circular],
                                                [Circular],
                                                ProjectionNode {
                                                  "animationProgress": 0,
                                                  "checkUpdateFailed": [Function],
                                                  "children": Set {},
                                                  "depth": 1,
                                                  "eventHandlers": Map {},
                                                  "hasProjected": false,
                                                  "id": undefined,
                                                  "instance": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "isAnimationBlocked": false,
                                                  "isLayoutDirty": false,
                                                  "isSVG": false,
                                                  "isTreeAnimating": false,
                                                  "isUpdating": false,
                                                  "isVisible": true,
                                                  "latestValues": Object {
                                                    "opacity": 0,
                                                    "x": 200,
                                                  },
                                                  "needsReset": false,
                                                  "options": Object {
                                                    "alwaysMeasureLayout": undefined,
                                                    "animationType": "both",
                                                    "crossfade": true,
                                                    "initialPromotionConfig": Object {},
                                                    "layout": undefined,
                                                    "layoutId": undefined,
                                                    "layoutScroll": undefined,
                                                    "scheduleRender": [Function],
                                                    "visualElement": Object {
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": false,
                                                      "build": [Function],
                                                      "children": Set {},
                                                      "clearAllListeners": [Function],
                                                      "current": <div
                                                        style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                      >
                                                        <h3
                                                          class="ant-typography"
                                                        >
                                                          To join a whole new world
                                                        </h3>
                                                      </div>,
                                                      "depth": 0,
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getTransformPagePoint": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isMounted": [Function],
                                                      "isVisible": undefined,
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "mount": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutAnimationStart": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUnmount": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutAnimationStart": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUnmount": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "parent": undefined,
                                                      "presenceId": undefined,
                                                      "projection": [Circular],
                                                      "readValue": [Function],
                                                      "removeValue": [Function],
                                                      "scheduleRender": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "shouldReduceMotion": false,
                                                      "sortNodePosition": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unmount": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": undefined,
                                                    },
                                                  },
                                                  "parent": [Circular],
                                                  "path": Array [
                                                    [Circular],
                                                  ],
                                                  "potentialNodes": Map {},
                                                  "root": [Circular],
                                                  "sharedNodes": Map {},
                                                  "shouldResetTransform": false,
                                                  "treeScale": Object {
                                                    "x": 1,
                                                    "y": 1,
                                                  },
                                                  "updateBlockedByResize": false,
                                                  "updateManuallyBlocked": false,
                                                  "updateProjection": [Function],
                                                },
                                              ],
                                              "isDirty": true,
                                            },
                                            "options": Object {
                                              "crossfade": true,
                                              "layoutScroll": true,
                                            },
                                            "parent": undefined,
                                            "path": Array [],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": true,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                        ],
                                        "potentialNodes": Map {},
                                        "root": ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                              >
                                                <h3
                                                  class="ant-typography"
                                                >
                                                  To join a whole new world
                                                </h3>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": 200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                  >
                                                    <h3
                                                      class="ant-typography"
                                                    >
                                                      To join a whole new world
                                                    </h3>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                >
                                                  <h3
                                                    class="ant-typography"
                                                  >
                                                    To join a whole new world
                                                  </h3>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": 200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                                    >
                                                      <h3
                                                        class="ant-typography"
                                                      >
                                                        To join a whole new world
                                                      </h3>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": false,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "readValue": [Function],
                                      "removeValue": [Function],
                                      "scheduleRender": [Function],
                                      "setBaseTarget": [Function],
                                      "setProps": [Function],
                                      "setStaticValue": [Function],
                                      "setVisibility": [Function],
                                      "shouldReduceMotion": false,
                                      "sortNodePosition": [Function],
                                      "syncRender": [Function],
                                      "treeType": "dom",
                                      "unmount": [Function],
                                      "updatePropListeners": [Function],
                                      "variantChildren": undefined,
                                    }
                                  }
                                />
                                <div
                                  style={
                                    Object {
                                      "opacity": 0,
                                      "transform": "translateX(-200px) translateZ(0)",
                                    }
                                  }
                                >
                                  <ForwardRef(Title)
                                    level={1}
                                  >
                                    <ForwardRef
                                      component="h1"
                                    >
                                      <ResizeObserver
                                        disabled={true}
                                        onResize={[Function]}
                                      >
                                        <SingleObserver
                                          disabled={true}
                                          key="rc-observer-key-0"
                                          onResize={[Function]}
                                        >
                                          <DomWrapper>
                                            <EllipsisTooltip
                                              enabledEllipsis={false}
                                              isEllipsis={false}
                                            >
                                              <Typography
                                                className=""
                                                component="h1"
                                                onClick={null}
                                                style={
                                                  Object {
                                                    "WebkitLineClamp": undefined,
                                                  }
                                                }
                                              >
                                                <h1
                                                  className="ant-typography"
                                                  onClick={null}
                                                  style={
                                                    Object {
                                                      "WebkitLineClamp": undefined,
                                                    }
                                                  }
                                                >
                                                  <Ellipsis
                                                    enabledMeasure={false}
                                                    onEllipsis={[Function]}
                                                    rows={1}
                                                    text="Register your account"
                                                    width={0}
                                                  >
                                                    Register your account
                                                  </Ellipsis>
                                                </h1>
                                              </Typography>
                                            </EllipsisTooltip>
                                          </DomWrapper>
                                        </SingleObserver>
                                      </ResizeObserver>
                                    </ForwardRef>
                                  </ForwardRef(Title)>
                                </div>
                              </VisualElementHandler>
                            </ForwardRef(MotionComponent)>
                            <ForwardRef(MotionComponent)
                              animate={
                                Object {
                                  "opacity": 1,
                                  "x": 0,
                                }
                              }
                              initial={
                                Object {
                                  "opacity": 0,
                                  "x": 200,
                                }
                              }
                              transition={
                                Object {
                                  "duration": 1,
                                }
                              }
                            >
                              <VisualElementHandler
                                props={
                                  Object {
                                    "animate": Object {
                                      "opacity": 1,
                                      "x": 0,
                                    },
                                    "children": <ForwardRef(Title)
                                      level={3}
                                    >
                                      To join a whole new world
                                    </ForwardRef(Title)>,
                                    "initial": Object {
                                      "opacity": 0,
                                      "x": 200,
                                    },
                                    "isStatic": false,
                                    "layoutId": undefined,
                                    "reducedMotion": "never",
                                    "transformPagePoint": [Function],
                                    "transition": Object {
                                      "duration": 1,
                                    },
                                  }
                                }
                                visualElement={
                                  Object {
                                    "addValue": [Function],
                                    "addVariantChild": [Function],
                                    "animationState": Object {
                                      "animateChanges": [Function],
                                      "getState": [Function],
                                      "isAnimated": [Function],
                                      "setActive": [Function],
                                      "setAnimateFunction": [Function],
                                    },
                                    "blockInitialAnimation": false,
                                    "build": [Function],
                                    "children": Set {},
                                    "clearAllListeners": [Function],
                                    "current": <div
                                      style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                    >
                                      <h3
                                        class="ant-typography"
                                      >
                                        To join a whole new world
                                      </h3>
                                    </div>,
                                    "depth": 0,
                                    "forEachValue": [Function],
                                    "getBaseTarget": [Function],
                                    "getClosestVariantNode": [Function],
                                    "getDefaultTransition": [Function],
                                    "getInstance": [Function],
                                    "getLatestValues": [Function],
                                    "getLayoutId": [Function],
                                    "getProps": [Function],
                                    "getStaticValue": [Function],
                                    "getTransformPagePoint": [Function],
                                    "getValue": [Function],
                                    "getVariant": [Function],
                                    "getVariantContext": [Function],
                                    "hasValue": [Function],
                                    "isMounted": [Function],
                                    "isVisible": undefined,
                                    "makeTargetAnimatable": [Function],
                                    "manuallyAnimateOnMount": false,
                                    "measureViewportBox": [Function],
                                    "mount": [Function],
                                    "notifyAnimationComplete": [Function],
                                    "notifyAnimationStart": [Function],
                                    "notifyBeforeLayoutMeasure": [Function],
                                    "notifyLayoutAnimationComplete": [Function],
                                    "notifyLayoutAnimationStart": [Function],
                                    "notifyLayoutMeasure": [Function],
                                    "notifyLayoutUpdate": [Function],
                                    "notifyRender": [Function],
                                    "notifySetAxisTarget": [Function],
                                    "notifyUnmount": [Function],
                                    "notifyUpdate": [Function],
                                    "notifyViewportBoxUpdate": [Function],
                                    "onAnimationComplete": [Function],
                                    "onAnimationStart": [Function],
                                    "onBeforeLayoutMeasure": [Function],
                                    "onLayoutAnimationComplete": [Function],
                                    "onLayoutAnimationStart": [Function],
                                    "onLayoutMeasure": [Function],
                                    "onLayoutUpdate": [Function],
                                    "onRender": [Function],
                                    "onSetAxisTarget": [Function],
                                    "onUnmount": [Function],
                                    "onUpdate": [Function],
                                    "onViewportBoxUpdate": [Function],
                                    "parent": undefined,
                                    "presenceId": undefined,
                                    "projection": ProjectionNode {
                                      "animationProgress": 0,
                                      "checkUpdateFailed": [Function],
                                      "children": Set {},
                                      "depth": 1,
                                      "eventHandlers": Map {},
                                      "hasProjected": false,
                                      "id": undefined,
                                      "instance": <div
                                        style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                      >
                                        <h3
                                          class="ant-typography"
                                        >
                                          To join a whole new world
                                        </h3>
                                      </div>,
                                      "isAnimationBlocked": false,
                                      "isLayoutDirty": false,
                                      "isSVG": false,
                                      "isTreeAnimating": false,
                                      "isUpdating": false,
                                      "isVisible": true,
                                      "latestValues": Object {
                                        "opacity": 0,
                                        "x": 200,
                                      },
                                      "needsReset": false,
                                      "options": Object {
                                        "alwaysMeasureLayout": undefined,
                                        "animationType": "both",
                                        "crossfade": true,
                                        "initialPromotionConfig": Object {},
                                        "layout": undefined,
                                        "layoutId": undefined,
                                        "layoutScroll": undefined,
                                        "scheduleRender": [Function],
                                        "visualElement": [Circular],
                                      },
                                      "parent": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {},
                                            "depth": 1,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": undefined,
                                            "instance": <div
                                              style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                            >
                                              <h1
                                                class="ant-typography"
                                              >
                                                Register your account
                                              </h1>
                                            </div>,
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {
                                              "opacity": 0,
                                              "x": -200,
                                            },
                                            "needsReset": false,
                                            "options": Object {
                                              "alwaysMeasureLayout": undefined,
                                              "animationType": "both",
                                              "crossfade": true,
                                              "initialPromotionConfig": Object {},
                                              "layout": undefined,
                                              "layoutId": undefined,
                                              "layoutScroll": undefined,
                                              "scheduleRender": [Function],
                                              "visualElement": Object {
                                                "addValue": [Function],
                                                "addVariantChild": [Function],
                                                "animationState": Object {
                                                  "animateChanges": [Function],
                                                  "getState": [Function],
                                                  "isAnimated": [Function],
                                                  "setActive": [Function],
                                                  "setAnimateFunction": [Function],
                                                },
                                                "blockInitialAnimation": false,
                                                "build": [Function],
                                                "children": Set {},
                                                "clearAllListeners": [Function],
                                                "current": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "depth": 0,
                                                "forEachValue": [Function],
                                                "getBaseTarget": [Function],
                                                "getClosestVariantNode": [Function],
                                                "getDefaultTransition": [Function],
                                                "getInstance": [Function],
                                                "getLatestValues": [Function],
                                                "getLayoutId": [Function],
                                                "getProps": [Function],
                                                "getStaticValue": [Function],
                                                "getTransformPagePoint": [Function],
                                                "getValue": [Function],
                                                "getVariant": [Function],
                                                "getVariantContext": [Function],
                                                "hasValue": [Function],
                                                "isMounted": [Function],
                                                "isVisible": undefined,
                                                "makeTargetAnimatable": [Function],
                                                "manuallyAnimateOnMount": false,
                                                "measureViewportBox": [Function],
                                                "mount": [Function],
                                                "notifyAnimationComplete": [Function],
                                                "notifyAnimationStart": [Function],
                                                "notifyBeforeLayoutMeasure": [Function],
                                                "notifyLayoutAnimationComplete": [Function],
                                                "notifyLayoutAnimationStart": [Function],
                                                "notifyLayoutMeasure": [Function],
                                                "notifyLayoutUpdate": [Function],
                                                "notifyRender": [Function],
                                                "notifySetAxisTarget": [Function],
                                                "notifyUnmount": [Function],
                                                "notifyUpdate": [Function],
                                                "notifyViewportBoxUpdate": [Function],
                                                "onAnimationComplete": [Function],
                                                "onAnimationStart": [Function],
                                                "onBeforeLayoutMeasure": [Function],
                                                "onLayoutAnimationComplete": [Function],
                                                "onLayoutAnimationStart": [Function],
                                                "onLayoutMeasure": [Function],
                                                "onLayoutUpdate": [Function],
                                                "onRender": [Function],
                                                "onSetAxisTarget": [Function],
                                                "onUnmount": [Function],
                                                "onUpdate": [Function],
                                                "onViewportBoxUpdate": [Function],
                                                "parent": undefined,
                                                "presenceId": undefined,
                                                "projection": [Circular],
                                                "readValue": [Function],
                                                "removeValue": [Function],
                                                "scheduleRender": [Function],
                                                "setBaseTarget": [Function],
                                                "setProps": [Function],
                                                "setStaticValue": [Function],
                                                "setVisibility": [Function],
                                                "shouldReduceMotion": false,
                                                "sortNodePosition": [Function],
                                                "syncRender": [Function],
                                                "treeType": "dom",
                                                "unmount": [Function],
                                                "updatePropListeners": [Function],
                                                "variantChildren": undefined,
                                              },
                                            },
                                            "parent": [Circular],
                                            "path": Array [
                                              [Circular],
                                            ],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": false,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                          [Circular],
                                        },
                                        "depth": 0,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": 0,
                                        "instance": [Window],
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {},
                                        "needsReset": false,
                                        "nodes": FlatTree {
                                          "children": Array [
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                              >
                                                <h1
                                                  class="ant-typography"
                                                >
                                                  Register your account
                                                </h1>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": -200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                            [Circular],
                                          ],
                                          "isDirty": true,
                                        },
                                        "options": Object {
                                          "crossfade": true,
                                          "layoutScroll": true,
                                        },
                                        "parent": undefined,
                                        "path": Array [],
                                        "potentialNodes": Map {},
                                        "root": [Circular],
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": true,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "path": Array [
                                        ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                              >
                                                <h1
                                                  class="ant-typography"
                                                >
                                                  Register your account
                                                </h1>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": -200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                            [Circular],
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": -200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                    >
                                                      <h1
                                                        class="ant-typography"
                                                      >
                                                        Register your account
                                                      </h1>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                              [Circular],
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                      ],
                                      "potentialNodes": Map {},
                                      "root": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {},
                                            "depth": 1,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": undefined,
                                            "instance": <div
                                              style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                            >
                                              <h1
                                                class="ant-typography"
                                              >
                                                Register your account
                                              </h1>
                                            </div>,
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {
                                              "opacity": 0,
                                              "x": -200,
                                            },
                                            "needsReset": false,
                                            "options": Object {
                                              "alwaysMeasureLayout": undefined,
                                              "animationType": "both",
                                              "crossfade": true,
                                              "initialPromotionConfig": Object {},
                                              "layout": undefined,
                                              "layoutId": undefined,
                                              "layoutScroll": undefined,
                                              "scheduleRender": [Function],
                                              "visualElement": Object {
                                                "addValue": [Function],
                                                "addVariantChild": [Function],
                                                "animationState": Object {
                                                  "animateChanges": [Function],
                                                  "getState": [Function],
                                                  "isAnimated": [Function],
                                                  "setActive": [Function],
                                                  "setAnimateFunction": [Function],
                                                },
                                                "blockInitialAnimation": false,
                                                "build": [Function],
                                                "children": Set {},
                                                "clearAllListeners": [Function],
                                                "current": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "depth": 0,
                                                "forEachValue": [Function],
                                                "getBaseTarget": [Function],
                                                "getClosestVariantNode": [Function],
                                                "getDefaultTransition": [Function],
                                                "getInstance": [Function],
                                                "getLatestValues": [Function],
                                                "getLayoutId": [Function],
                                                "getProps": [Function],
                                                "getStaticValue": [Function],
                                                "getTransformPagePoint": [Function],
                                                "getValue": [Function],
                                                "getVariant": [Function],
                                                "getVariantContext": [Function],
                                                "hasValue": [Function],
                                                "isMounted": [Function],
                                                "isVisible": undefined,
                                                "makeTargetAnimatable": [Function],
                                                "manuallyAnimateOnMount": false,
                                                "measureViewportBox": [Function],
                                                "mount": [Function],
                                                "notifyAnimationComplete": [Function],
                                                "notifyAnimationStart": [Function],
                                                "notifyBeforeLayoutMeasure": [Function],
                                                "notifyLayoutAnimationComplete": [Function],
                                                "notifyLayoutAnimationStart": [Function],
                                                "notifyLayoutMeasure": [Function],
                                                "notifyLayoutUpdate": [Function],
                                                "notifyRender": [Function],
                                                "notifySetAxisTarget": [Function],
                                                "notifyUnmount": [Function],
                                                "notifyUpdate": [Function],
                                                "notifyViewportBoxUpdate": [Function],
                                                "onAnimationComplete": [Function],
                                                "onAnimationStart": [Function],
                                                "onBeforeLayoutMeasure": [Function],
                                                "onLayoutAnimationComplete": [Function],
                                                "onLayoutAnimationStart": [Function],
                                                "onLayoutMeasure": [Function],
                                                "onLayoutUpdate": [Function],
                                                "onRender": [Function],
                                                "onSetAxisTarget": [Function],
                                                "onUnmount": [Function],
                                                "onUpdate": [Function],
                                                "onViewportBoxUpdate": [Function],
                                                "parent": undefined,
                                                "presenceId": undefined,
                                                "projection": [Circular],
                                                "readValue": [Function],
                                                "removeValue": [Function],
                                                "scheduleRender": [Function],
                                                "setBaseTarget": [Function],
                                                "setProps": [Function],
                                                "setStaticValue": [Function],
                                                "setVisibility": [Function],
                                                "shouldReduceMotion": false,
                                                "sortNodePosition": [Function],
                                                "syncRender": [Function],
                                                "treeType": "dom",
                                                "unmount": [Function],
                                                "updatePropListeners": [Function],
                                                "variantChildren": undefined,
                                              },
                                            },
                                            "parent": [Circular],
                                            "path": Array [
                                              [Circular],
                                            ],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": false,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                          [Circular],
                                        },
                                        "depth": 0,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": 0,
                                        "instance": [Window],
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {},
                                        "needsReset": false,
                                        "nodes": FlatTree {
                                          "children": Array [
                                            [Circular],
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                              >
                                                <h1
                                                  class="ant-typography"
                                                >
                                                  Register your account
                                                </h1>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": -200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                            [Circular],
                                          ],
                                          "isDirty": true,
                                        },
                                        "options": Object {
                                          "crossfade": true,
                                          "layoutScroll": true,
                                        },
                                        "parent": undefined,
                                        "path": Array [],
                                        "potentialNodes": Map {},
                                        "root": [Circular],
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": true,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "sharedNodes": Map {},
                                      "shouldResetTransform": false,
                                      "treeScale": Object {
                                        "x": 1,
                                        "y": 1,
                                      },
                                      "updateBlockedByResize": false,
                                      "updateManuallyBlocked": false,
                                      "updateProjection": [Function],
                                    },
                                    "readValue": [Function],
                                    "removeValue": [Function],
                                    "scheduleRender": [Function],
                                    "setBaseTarget": [Function],
                                    "setProps": [Function],
                                    "setStaticValue": [Function],
                                    "setVisibility": [Function],
                                    "shouldReduceMotion": false,
                                    "sortNodePosition": [Function],
                                    "syncRender": [Function],
                                    "treeType": "dom",
                                    "unmount": [Function],
                                    "updatePropListeners": [Function],
                                    "variantChildren": undefined,
                                  }
                                }
                              >
                                <Component
                                  animate={
                                    Object {
                                      "opacity": 1,
                                      "x": 0,
                                    }
                                  }
                                  initial={
                                    Object {
                                      "opacity": 0,
                                      "x": 200,
                                    }
                                  }
                                  key="animation"
                                  transition={
                                    Object {
                                      "duration": 1,
                                    }
                                  }
                                  visualElement={
                                    Object {
                                      "addValue": [Function],
                                      "addVariantChild": [Function],
                                      "animationState": Object {
                                        "animateChanges": [Function],
                                        "getState": [Function],
                                        "isAnimated": [Function],
                                        "setActive": [Function],
                                        "setAnimateFunction": [Function],
                                      },
                                      "blockInitialAnimation": false,
                                      "build": [Function],
                                      "children": Set {},
                                      "clearAllListeners": [Function],
                                      "current": <div
                                        style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                      >
                                        <h3
                                          class="ant-typography"
                                        >
                                          To join a whole new world
                                        </h3>
                                      </div>,
                                      "depth": 0,
                                      "forEachValue": [Function],
                                      "getBaseTarget": [Function],
                                      "getClosestVariantNode": [Function],
                                      "getDefaultTransition": [Function],
                                      "getInstance": [Function],
                                      "getLatestValues": [Function],
                                      "getLayoutId": [Function],
                                      "getProps": [Function],
                                      "getStaticValue": [Function],
                                      "getTransformPagePoint": [Function],
                                      "getValue": [Function],
                                      "getVariant": [Function],
                                      "getVariantContext": [Function],
                                      "hasValue": [Function],
                                      "isMounted": [Function],
                                      "isVisible": undefined,
                                      "makeTargetAnimatable": [Function],
                                      "manuallyAnimateOnMount": false,
                                      "measureViewportBox": [Function],
                                      "mount": [Function],
                                      "notifyAnimationComplete": [Function],
                                      "notifyAnimationStart": [Function],
                                      "notifyBeforeLayoutMeasure": [Function],
                                      "notifyLayoutAnimationComplete": [Function],
                                      "notifyLayoutAnimationStart": [Function],
                                      "notifyLayoutMeasure": [Function],
                                      "notifyLayoutUpdate": [Function],
                                      "notifyRender": [Function],
                                      "notifySetAxisTarget": [Function],
                                      "notifyUnmount": [Function],
                                      "notifyUpdate": [Function],
                                      "notifyViewportBoxUpdate": [Function],
                                      "onAnimationComplete": [Function],
                                      "onAnimationStart": [Function],
                                      "onBeforeLayoutMeasure": [Function],
                                      "onLayoutAnimationComplete": [Function],
                                      "onLayoutAnimationStart": [Function],
                                      "onLayoutMeasure": [Function],
                                      "onLayoutUpdate": [Function],
                                      "onRender": [Function],
                                      "onSetAxisTarget": [Function],
                                      "onUnmount": [Function],
                                      "onUpdate": [Function],
                                      "onViewportBoxUpdate": [Function],
                                      "parent": undefined,
                                      "presenceId": undefined,
                                      "projection": ProjectionNode {
                                        "animationProgress": 0,
                                        "checkUpdateFailed": [Function],
                                        "children": Set {},
                                        "depth": 1,
                                        "eventHandlers": Map {},
                                        "hasProjected": false,
                                        "id": undefined,
                                        "instance": <div
                                          style="opacity: 0; transform: translateX(200px) translateZ(0);"
                                        >
                                          <h3
                                            class="ant-typography"
                                          >
                                            To join a whole new world
                                          </h3>
                                        </div>,
                                        "isAnimationBlocked": false,
                                        "isLayoutDirty": false,
                                        "isSVG": false,
                                        "isTreeAnimating": false,
                                        "isUpdating": false,
                                        "isVisible": true,
                                        "latestValues": Object {
                                          "opacity": 0,
                                          "x": 200,
                                        },
                                        "needsReset": false,
                                        "options": Object {
                                          "alwaysMeasureLayout": undefined,
                                          "animationType": "both",
                                          "crossfade": true,
                                          "initialPromotionConfig": Object {},
                                          "layout": undefined,
                                          "layoutId": undefined,
                                          "layoutScroll": undefined,
                                          "scheduleRender": [Function],
                                          "visualElement": [Circular],
                                        },
                                        "parent": ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                              >
                                                <h1
                                                  class="ant-typography"
                                                >
                                                  Register your account
                                                </h1>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": -200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                            [Circular],
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": -200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                    >
                                                      <h1
                                                        class="ant-typography"
                                                      >
                                                        Register your account
                                                      </h1>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                              [Circular],
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                        "path": Array [
                                          ProjectionNode {
                                            "animationProgress": 0,
                                            "checkUpdateFailed": [Function],
                                            "children": Set {
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": -200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                    >
                                                      <h1
                                                        class="ant-typography"
                                                      >
                                                        Register your account
                                                      </h1>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                              [Circular],
                                            },
                                            "depth": 0,
                                            "eventHandlers": Map {},
                                            "hasProjected": false,
                                            "id": 0,
                                            "instance": [Window],
                                            "isAnimationBlocked": false,
                                            "isLayoutDirty": false,
                                            "isSVG": false,
                                            "isTreeAnimating": false,
                                            "isUpdating": false,
                                            "isVisible": true,
                                            "latestValues": Object {},
                                            "needsReset": false,
                                            "nodes": FlatTree {
                                              "children": Array [
                                                [Circular],
                                                ProjectionNode {
                                                  "animationProgress": 0,
                                                  "checkUpdateFailed": [Function],
                                                  "children": Set {},
                                                  "depth": 1,
                                                  "eventHandlers": Map {},
                                                  "hasProjected": false,
                                                  "id": undefined,
                                                  "instance": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "isAnimationBlocked": false,
                                                  "isLayoutDirty": false,
                                                  "isSVG": false,
                                                  "isTreeAnimating": false,
                                                  "isUpdating": false,
                                                  "isVisible": true,
                                                  "latestValues": Object {
                                                    "opacity": 0,
                                                    "x": -200,
                                                  },
                                                  "needsReset": false,
                                                  "options": Object {
                                                    "alwaysMeasureLayout": undefined,
                                                    "animationType": "both",
                                                    "crossfade": true,
                                                    "initialPromotionConfig": Object {},
                                                    "layout": undefined,
                                                    "layoutId": undefined,
                                                    "layoutScroll": undefined,
                                                    "scheduleRender": [Function],
                                                    "visualElement": Object {
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": false,
                                                      "build": [Function],
                                                      "children": Set {},
                                                      "clearAllListeners": [Function],
                                                      "current": <div
                                                        style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                      >
                                                        <h1
                                                          class="ant-typography"
                                                        >
                                                          Register your account
                                                        </h1>
                                                      </div>,
                                                      "depth": 0,
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getTransformPagePoint": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isMounted": [Function],
                                                      "isVisible": undefined,
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "mount": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutAnimationStart": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUnmount": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutAnimationStart": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUnmount": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "parent": undefined,
                                                      "presenceId": undefined,
                                                      "projection": [Circular],
                                                      "readValue": [Function],
                                                      "removeValue": [Function],
                                                      "scheduleRender": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "shouldReduceMotion": false,
                                                      "sortNodePosition": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unmount": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": undefined,
                                                    },
                                                  },
                                                  "parent": [Circular],
                                                  "path": Array [
                                                    [Circular],
                                                  ],
                                                  "potentialNodes": Map {},
                                                  "root": [Circular],
                                                  "sharedNodes": Map {},
                                                  "shouldResetTransform": false,
                                                  "treeScale": Object {
                                                    "x": 1,
                                                    "y": 1,
                                                  },
                                                  "updateBlockedByResize": false,
                                                  "updateManuallyBlocked": false,
                                                  "updateProjection": [Function],
                                                },
                                                [Circular],
                                              ],
                                              "isDirty": true,
                                            },
                                            "options": Object {
                                              "crossfade": true,
                                              "layoutScroll": true,
                                            },
                                            "parent": undefined,
                                            "path": Array [],
                                            "potentialNodes": Map {},
                                            "root": [Circular],
                                            "sharedNodes": Map {},
                                            "shouldResetTransform": true,
                                            "treeScale": Object {
                                              "x": 1,
                                              "y": 1,
                                            },
                                            "updateBlockedByResize": false,
                                            "updateManuallyBlocked": false,
                                            "updateProjection": [Function],
                                          },
                                        ],
                                        "potentialNodes": Map {},
                                        "root": ProjectionNode {
                                          "animationProgress": 0,
                                          "checkUpdateFailed": [Function],
                                          "children": Set {
                                            ProjectionNode {
                                              "animationProgress": 0,
                                              "checkUpdateFailed": [Function],
                                              "children": Set {},
                                              "depth": 1,
                                              "eventHandlers": Map {},
                                              "hasProjected": false,
                                              "id": undefined,
                                              "instance": <div
                                                style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                              >
                                                <h1
                                                  class="ant-typography"
                                                >
                                                  Register your account
                                                </h1>
                                              </div>,
                                              "isAnimationBlocked": false,
                                              "isLayoutDirty": false,
                                              "isSVG": false,
                                              "isTreeAnimating": false,
                                              "isUpdating": false,
                                              "isVisible": true,
                                              "latestValues": Object {
                                                "opacity": 0,
                                                "x": -200,
                                              },
                                              "needsReset": false,
                                              "options": Object {
                                                "alwaysMeasureLayout": undefined,
                                                "animationType": "both",
                                                "crossfade": true,
                                                "initialPromotionConfig": Object {},
                                                "layout": undefined,
                                                "layoutId": undefined,
                                                "layoutScroll": undefined,
                                                "scheduleRender": [Function],
                                                "visualElement": Object {
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": false,
                                                  "build": [Function],
                                                  "children": Set {},
                                                  "clearAllListeners": [Function],
                                                  "current": <div
                                                    style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                  >
                                                    <h1
                                                      class="ant-typography"
                                                    >
                                                      Register your account
                                                    </h1>
                                                  </div>,
                                                  "depth": 0,
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getTransformPagePoint": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isMounted": [Function],
                                                  "isVisible": undefined,
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "mount": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutAnimationStart": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUnmount": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutAnimationStart": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUnmount": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "parent": undefined,
                                                  "presenceId": undefined,
                                                  "projection": [Circular],
                                                  "readValue": [Function],
                                                  "removeValue": [Function],
                                                  "scheduleRender": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "shouldReduceMotion": false,
                                                  "sortNodePosition": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unmount": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": undefined,
                                                },
                                              },
                                              "parent": [Circular],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "potentialNodes": Map {},
                                              "root": [Circular],
                                              "sharedNodes": Map {},
                                              "shouldResetTransform": false,
                                              "treeScale": Object {
                                                "x": 1,
                                                "y": 1,
                                              },
                                              "updateBlockedByResize": false,
                                              "updateManuallyBlocked": false,
                                              "updateProjection": [Function],
                                            },
                                            [Circular],
                                          },
                                          "depth": 0,
                                          "eventHandlers": Map {},
                                          "hasProjected": false,
                                          "id": 0,
                                          "instance": [Window],
                                          "isAnimationBlocked": false,
                                          "isLayoutDirty": false,
                                          "isSVG": false,
                                          "isTreeAnimating": false,
                                          "isUpdating": false,
                                          "isVisible": true,
                                          "latestValues": Object {},
                                          "needsReset": false,
                                          "nodes": FlatTree {
                                            "children": Array [
                                              [Circular],
                                              ProjectionNode {
                                                "animationProgress": 0,
                                                "checkUpdateFailed": [Function],
                                                "children": Set {},
                                                "depth": 1,
                                                "eventHandlers": Map {},
                                                "hasProjected": false,
                                                "id": undefined,
                                                "instance": <div
                                                  style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                >
                                                  <h1
                                                    class="ant-typography"
                                                  >
                                                    Register your account
                                                  </h1>
                                                </div>,
                                                "isAnimationBlocked": false,
                                                "isLayoutDirty": false,
                                                "isSVG": false,
                                                "isTreeAnimating": false,
                                                "isUpdating": false,
                                                "isVisible": true,
                                                "latestValues": Object {
                                                  "opacity": 0,
                                                  "x": -200,
                                                },
                                                "needsReset": false,
                                                "options": Object {
                                                  "alwaysMeasureLayout": undefined,
                                                  "animationType": "both",
                                                  "crossfade": true,
                                                  "initialPromotionConfig": Object {},
                                                  "layout": undefined,
                                                  "layoutId": undefined,
                                                  "layoutScroll": undefined,
                                                  "scheduleRender": [Function],
                                                  "visualElement": Object {
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": false,
                                                    "build": [Function],
                                                    "children": Set {},
                                                    "clearAllListeners": [Function],
                                                    "current": <div
                                                      style="opacity: 0; transform: translateX(-200px) translateZ(0);"
                                                    >
                                                      <h1
                                                        class="ant-typography"
                                                      >
                                                        Register your account
                                                      </h1>
                                                    </div>,
                                                    "depth": 0,
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getTransformPagePoint": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isMounted": [Function],
                                                    "isVisible": undefined,
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "mount": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutAnimationStart": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUnmount": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutAnimationStart": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUnmount": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "parent": undefined,
                                                    "presenceId": undefined,
                                                    "projection": [Circular],
                                                    "readValue": [Function],
                                                    "removeValue": [Function],
                                                    "scheduleRender": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "shouldReduceMotion": false,
                                                    "sortNodePosition": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unmount": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": undefined,
                                                  },
                                                },
                                                "parent": [Circular],
                                                "path": Array [
                                                  [Circular],
                                                ],
                                                "potentialNodes": Map {},
                                                "root": [Circular],
                                                "sharedNodes": Map {},
                                                "shouldResetTransform": false,
                                                "treeScale": Object {
                                                  "x": 1,
                                                  "y": 1,
                                                },
                                                "updateBlockedByResize": false,
                                                "updateManuallyBlocked": false,
                                                "updateProjection": [Function],
                                              },
                                              [Circular],
                                            ],
                                            "isDirty": true,
                                          },
                                          "options": Object {
                                            "crossfade": true,
                                            "layoutScroll": true,
                                          },
                                          "parent": undefined,
                                          "path": Array [],
                                          "potentialNodes": Map {},
                                          "root": [Circular],
                                          "sharedNodes": Map {},
                                          "shouldResetTransform": true,
                                          "treeScale": Object {
                                            "x": 1,
                                            "y": 1,
                                          },
                                          "updateBlockedByResize": false,
                                          "updateManuallyBlocked": false,
                                          "updateProjection": [Function],
                                        },
                                        "sharedNodes": Map {},
                                        "shouldResetTransform": false,
                                        "treeScale": Object {
                                          "x": 1,
                                          "y": 1,
                                        },
                                        "updateBlockedByResize": false,
                                        "updateManuallyBlocked": false,
                                        "updateProjection": [Function],
                                      },
                                      "readValue": [Function],
                                      "removeValue": [Function],
                                      "scheduleRender": [Function],
                                      "setBaseTarget": [Function],
                                      "setProps": [Function],
                                      "setStaticValue": [Function],
                                      "setVisibility": [Function],
                                      "shouldReduceMotion": false,
                                      "sortNodePosition": [Function],
                                      "syncRender": [Function],
                                      "treeType": "dom",
                                      "unmount": [Function],
                                      "updatePropListeners": [Function],
                                      "variantChildren": undefined,
                                    }
                                  }
                                />
                                <div
                                  style={
                                    Object {
                                      "opacity": 0,
                                      "transform": "translateX(200px) translateZ(0)",
                                    }
                                  }
                                >
                                  <ForwardRef(Title)
                                    level={3}
                                  >
                                    <ForwardRef
                                      component="h3"
                                    >
                                      <ResizeObserver
                                        disabled={true}
                                        onResize={[Function]}
                                      >
                                        <SingleObserver
                                          disabled={true}
                                          key="rc-observer-key-0"
                                          onResize={[Function]}
                                        >
                                          <DomWrapper>
                                            <EllipsisTooltip
                                              enabledEllipsis={false}
                                              isEllipsis={false}
                                            >
                                              <Typography
                                                className=""
                                                component="h3"
                                                onClick={null}
                                                style={
                                                  Object {
                                                    "WebkitLineClamp": undefined,
                                                  }
                                                }
                                              >
                                                <h3
                                                  className="ant-typography"
                                                  onClick={null}
                                                  style={
                                                    Object {
                                                      "WebkitLineClamp": undefined,
                                                    }
                                                  }
                                                >
                                                  <Ellipsis
                                                    enabledMeasure={false}
                                                    onEllipsis={[Function]}
                                                    rows={1}
                                                    text="To join a whole new world"
                                                    width={0}
                                                  >
                                                    To join a whole new world
                                                  </Ellipsis>
                                                </h3>
                                              </Typography>
                                            </EllipsisTooltip>
                                          </DomWrapper>
                                        </SingleObserver>
                                      </ResizeObserver>
                                    </ForwardRef>
                                  </ForwardRef(Title)>
                                </div>
                              </VisualElementHandler>
                            </ForwardRef(MotionComponent)>
                          </div>
                        </div>
                      </section>
                    </RegisterBanner>
                    <div
                      className="grid wide"
                    >
                      <Row
                        justify="center"
                      >
                        <div
                          className="ant-row ant-row-center"
                          style={Object {}}
                        >
                          <Col
                            md={16}
                            xs={22}
                          >
                            <div
                              className="ant-col ant-col-xs-22 ant-col-md-16"
                              style={Object {}}
                            >
                              <div
                                className="content"
                              >
                                <div
                                  className="box"
                                >
                                  <ForwardRef(Title)
                                    level={2}
                                  >
                                    <ForwardRef
                                      component="h2"
                                    >
                                      <ResizeObserver
                                        disabled={true}
                                        onResize={[Function]}
                                      >
                                        <SingleObserver
                                          disabled={true}
                                          key="rc-observer-key-0"
                                          onResize={[Function]}
                                        >
                                          <DomWrapper>
                                            <EllipsisTooltip
                                              enabledEllipsis={false}
                                              isEllipsis={false}
                                            >
                                              <Typography
                                                className=""
                                                component="h2"
                                                onClick={null}
                                                style={
                                                  Object {
                                                    "WebkitLineClamp": undefined,
                                                  }
                                                }
                                              >
                                                <h2
                                                  className="ant-typography"
                                                  onClick={null}
                                                  style={
                                                    Object {
                                                      "WebkitLineClamp": undefined,
                                                    }
                                                  }
                                                >
                                                  <Ellipsis
                                                    enabledMeasure={false}
                                                    onEllipsis={[Function]}
                                                    rows={1}
                                                    text="Register"
                                                    width={0}
                                                  >
                                                    Register
                                                  </Ellipsis>
                                                </h2>
                                              </Typography>
                                            </EllipsisTooltip>
                                          </DomWrapper>
                                        </SingleObserver>
                                      </ResizeObserver>
                                    </ForwardRef>
                                  </ForwardRef(Title)>
                                  <ForwardRef(InternalForm)
                                    autoComplete="off"
                                    className="form"
                                    onFinish={[Function]}
                                  >
                                    <DisabledContextProvider
                                      disabled={false}
                                    >
                                      <SizeContextProvider>
                                        <ForwardRef(Form)
                                          autoComplete="off"
                                          className="ant-form ant-form-horizontal form"
                                          form={
                                            Object {
                                              "__INTERNAL__": Object {
                                                "itemRef": [Function],
                                                "name": undefined,
                                              },
                                              "_init": true,
                                              "getFieldError": [Function],
                                              "getFieldInstance": [Function],
                                              "getFieldValue": [Function],
                                              "getFieldWarning": [Function],
                                              "getFieldsError": [Function],
                                              "getFieldsValue": [Function],
                                              "getInternalHooks": [Function],
                                              "isFieldTouched": [Function],
                                              "isFieldValidating": [Function],
                                              "isFieldsTouched": [Function],
                                              "isFieldsValidating": [Function],
                                              "resetFields": [Function],
                                              "scrollToField": [Function],
                                              "setFields": [Function],
                                              "setFieldsValue": [Function],
                                              "submit": [Function],
                                              "validateFields": [Function],
                                            }
                                          }
                                          onFinish={[Function]}
                                          onFinishFailed={[Function]}
                                        >
                                          <form
                                            autoComplete="off"
                                            className="ant-form ant-form-horizontal form"
                                            onReset={[Function]}
                                            onSubmit={[Function]}
                                          >
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                name="idno"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please fill your ID number!",
                                                      "required": true,
                                                    },
                                                    Object {
                                                      "max": 20,
                                                      "message": "Your ID not be longer than 20 characters",
                                                    },
                                                    ,
                                                    [Function],
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  messageVariables={
                                                    Object {
                                                      "label": "idno",
                                                    }
                                                  }
                                                  name="idno"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please fill your ID number!",
                                                        "required": true,
                                                      },
                                                      Object {
                                                        "max": 20,
                                                        "message": "Your ID not be longer than 20 characters",
                                                      },
                                                      ,
                                                      [Function],
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_idno"
                                                    messageVariables={
                                                      Object {
                                                        "label": "idno",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "idno",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please fill your ID number!",
                                                          "required": true,
                                                        },
                                                        Object {
                                                          "max": 20,
                                                          "message": "Your ID not be longer than 20 characters",
                                                        },
                                                        ,
                                                        [Function],
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          htmlFor="idno"
                                                          name="idno"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your ID number!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "Your ID not be longer than 20 characters",
                                                              },
                                                              ,
                                                              [Function],
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your ID number!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "Your ID not be longer than 20 characters",
                                                              },
                                                              ,
                                                              [Function],
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <ForwardRef
                                                                        placeholder="ID number"
                                                                      />
                                                                    }
                                                                  >
                                                                    <ForwardRef
                                                                      id="idno"
                                                                      onChange={[Function]}
                                                                      placeholder="ID number"
                                                                    >
                                                                      <ForwardRef
                                                                        affixWrapperClassName=""
                                                                        groupClassName=""
                                                                        id="idno"
                                                                        inputClassName=""
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        placeholder="ID number"
                                                                        prefixCls="ant-input"
                                                                        wrapperClassName=""
                                                                      >
                                                                        <BaseInput
                                                                          affixWrapperClassName=""
                                                                          focused={false}
                                                                          groupClassName=""
                                                                          handleReset={[Function]}
                                                                          id="idno"
                                                                          inputElement={
                                                                            <input
                                                                              className="ant-input"
                                                                              id="idno"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              placeholder="ID number"
                                                                              type="text"
                                                                            />
                                                                          }
                                                                          placeholder="ID number"
                                                                          prefixCls="ant-input"
                                                                          suffix={null}
                                                                          triggerFocus={[Function]}
                                                                          value=""
                                                                          wrapperClassName=""
                                                                        >
                                                                          <input
                                                                            className="ant-input"
                                                                            id="idno"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            placeholder="ID number"
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </BaseInput>
                                                                      </ForwardRef>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                name="name"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please fill your display name!",
                                                      "required": true,
                                                    },
                                                    Object {
                                                      "max": 20,
                                                      "message": "Your name must not be longer than 20 characters",
                                                    },
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  messageVariables={
                                                    Object {
                                                      "label": "name",
                                                    }
                                                  }
                                                  name="name"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please fill your display name!",
                                                        "required": true,
                                                      },
                                                      Object {
                                                        "max": 20,
                                                        "message": "Your name must not be longer than 20 characters",
                                                      },
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_name"
                                                    messageVariables={
                                                      Object {
                                                        "label": "name",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "name",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please fill your display name!",
                                                          "required": true,
                                                        },
                                                        Object {
                                                          "max": 20,
                                                          "message": "Your name must not be longer than 20 characters",
                                                        },
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          htmlFor="name"
                                                          name="name"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your display name!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "Your name must not be longer than 20 characters",
                                                              },
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your display name!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "Your name must not be longer than 20 characters",
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <ForwardRef
                                                                        placeholder="Display name"
                                                                      />
                                                                    }
                                                                  >
                                                                    <ForwardRef
                                                                      id="name"
                                                                      onChange={[Function]}
                                                                      placeholder="Display name"
                                                                    >
                                                                      <ForwardRef
                                                                        affixWrapperClassName=""
                                                                        groupClassName=""
                                                                        id="name"
                                                                        inputClassName=""
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        placeholder="Display name"
                                                                        prefixCls="ant-input"
                                                                        wrapperClassName=""
                                                                      >
                                                                        <BaseInput
                                                                          affixWrapperClassName=""
                                                                          focused={false}
                                                                          groupClassName=""
                                                                          handleReset={[Function]}
                                                                          id="name"
                                                                          inputElement={
                                                                            <input
                                                                              className="ant-input"
                                                                              id="name"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              placeholder="Display name"
                                                                              type="text"
                                                                            />
                                                                          }
                                                                          placeholder="Display name"
                                                                          prefixCls="ant-input"
                                                                          suffix={null}
                                                                          triggerFocus={[Function]}
                                                                          value=""
                                                                          wrapperClassName=""
                                                                        >
                                                                          <input
                                                                            className="ant-input"
                                                                            id="name"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            placeholder="Display name"
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </BaseInput>
                                                                      </ForwardRef>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                label="Gender"
                                                name="gender"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please pick a gender!",
                                                      "required": true,
                                                    },
                                                  ]
                                                }
                                                style={
                                                  Object {
                                                    "textAlign": "left",
                                                  }
                                                }
                                              >
                                                <WrapperField
                                                  label="Gender"
                                                  messageVariables={
                                                    Object {
                                                      "label": "Gender",
                                                    }
                                                  }
                                                  name="gender"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please pick a gender!",
                                                        "required": true,
                                                      },
                                                    ]
                                                  }
                                                  style={
                                                    Object {
                                                      "textAlign": "left",
                                                    }
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_gender"
                                                    label="Gender"
                                                    messageVariables={
                                                      Object {
                                                        "label": "Gender",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "gender",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please pick a gender!",
                                                          "required": true,
                                                        },
                                                      ]
                                                    }
                                                    style={
                                                      Object {
                                                        "textAlign": "left",
                                                      }
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item"
                                                      key="row"
                                                      style={
                                                        Object {
                                                          "textAlign": "left",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item"
                                                        style={
                                                          Object {
                                                            "textAlign": "left",
                                                          }
                                                        }
                                                      >
                                                        <FormItemLabel
                                                          htmlFor="gender"
                                                          label="Gender"
                                                          name="gender"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please pick a gender!",
                                                                "required": true,
                                                              },
                                                            ]
                                                          }
                                                          style={
                                                            Object {
                                                              "textAlign": "left",
                                                            }
                                                          }
                                                        >
                                                          <Col
                                                            className="ant-form-item-label"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-label"
                                                              style={Object {}}
                                                            >
                                                              <label
                                                                className="ant-form-item-required"
                                                                htmlFor="gender"
                                                                title="Gender"
                                                              >
                                                                Gender
                                                              </label>
                                                            </div>
                                                          </Col>
                                                        </FormItemLabel>
                                                        <FormItemInput
                                                          errors={Array []}
                                                          label="Gender"
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please pick a gender!",
                                                                "required": true,
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          style={
                                                            Object {
                                                              "textAlign": "left",
                                                            }
                                                          }
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <Memo>
                                                                        <Radio
                                                                          value="male"
                                                                        >
                                                                           Male 
                                                                        </Radio>
                                                                        <Radio
                                                                          value="female"
                                                                        >
                                                                           Female 
                                                                        </Radio>
                                                                      </Memo>
                                                                    }
                                                                  >
                                                                    <ForwardRef
                                                                      id="gender"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <div
                                                                        className="ant-radio-group ant-radio-group-outline"
                                                                        id="gender"
                                                                      >
                                                                        <Radio
                                                                          value="male"
                                                                        >
                                                                          <label
                                                                            className="ant-radio-wrapper ant-radio-wrapper-in-form-item"
                                                                          >
                                                                            <Checkbox
                                                                              checked={false}
                                                                              className=""
                                                                              defaultChecked={false}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              onKeyPress={[Function]}
                                                                              onKeyUp={[Function]}
                                                                              prefixCls="ant-radio"
                                                                              style={Object {}}
                                                                              type="radio"
                                                                              value="male"
                                                                            >
                                                                              <span
                                                                                className="ant-radio"
                                                                                style={Object {}}
                                                                              >
                                                                                <input
                                                                                  checked={false}
                                                                                  className="ant-radio-input"
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyPress={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  type="radio"
                                                                                  value="male"
                                                                                />
                                                                                <span
                                                                                  className="ant-radio-inner"
                                                                                />
                                                                              </span>
                                                                            </Checkbox>
                                                                            <span>
                                                                               Male 
                                                                            </span>
                                                                          </label>
                                                                        </Radio>
                                                                        <Radio
                                                                          value="female"
                                                                        >
                                                                          <label
                                                                            className="ant-radio-wrapper ant-radio-wrapper-in-form-item"
                                                                          >
                                                                            <Checkbox
                                                                              checked={false}
                                                                              className=""
                                                                              defaultChecked={false}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              onKeyPress={[Function]}
                                                                              onKeyUp={[Function]}
                                                                              prefixCls="ant-radio"
                                                                              style={Object {}}
                                                                              type="radio"
                                                                              value="female"
                                                                            >
                                                                              <span
                                                                                className="ant-radio"
                                                                                style={Object {}}
                                                                              >
                                                                                <input
                                                                                  checked={false}
                                                                                  className="ant-radio-input"
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyPress={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  type="radio"
                                                                                  value="female"
                                                                                />
                                                                                <span
                                                                                  className="ant-radio-inner"
                                                                                />
                                                                              </span>
                                                                            </Checkbox>
                                                                            <span>
                                                                               Female 
                                                                            </span>
                                                                          </label>
                                                                        </Radio>
                                                                      </div>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                label="Birth Date"
                                                name="birthday"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please pick the birth date!",
                                                      "required": true,
                                                    },
                                                  ]
                                                }
                                                style={
                                                  Object {
                                                    "textAlign": "left",
                                                  }
                                                }
                                              >
                                                <WrapperField
                                                  label="Birth Date"
                                                  messageVariables={
                                                    Object {
                                                      "label": "Birth Date",
                                                    }
                                                  }
                                                  name="birthday"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please pick the birth date!",
                                                        "required": true,
                                                      },
                                                    ]
                                                  }
                                                  style={
                                                    Object {
                                                      "textAlign": "left",
                                                    }
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_birthday"
                                                    label="Birth Date"
                                                    messageVariables={
                                                      Object {
                                                        "label": "Birth Date",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "birthday",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please pick the birth date!",
                                                          "required": true,
                                                        },
                                                      ]
                                                    }
                                                    style={
                                                      Object {
                                                        "textAlign": "left",
                                                      }
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item"
                                                      key="row"
                                                      style={
                                                        Object {
                                                          "textAlign": "left",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item"
                                                        style={
                                                          Object {
                                                            "textAlign": "left",
                                                          }
                                                        }
                                                      >
                                                        <FormItemLabel
                                                          htmlFor="birthday"
                                                          label="Birth Date"
                                                          name="birthday"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please pick the birth date!",
                                                                "required": true,
                                                              },
                                                            ]
                                                          }
                                                          style={
                                                            Object {
                                                              "textAlign": "left",
                                                            }
                                                          }
                                                        >
                                                          <Col
                                                            className="ant-form-item-label"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-label"
                                                              style={Object {}}
                                                            >
                                                              <label
                                                                className="ant-form-item-required"
                                                                htmlFor="birthday"
                                                                title="Birth Date"
                                                              >
                                                                Birth Date
                                                              </label>
                                                            </div>
                                                          </Col>
                                                        </FormItemLabel>
                                                        <FormItemInput
                                                          errors={Array []}
                                                          label="Birth Date"
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please pick the birth date!",
                                                                "required": true,
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          style={
                                                            Object {
                                                              "textAlign": "left",
                                                            }
                                                          }
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={<ForwardRef />}
                                                                  >
                                                                    <ForwardRef
                                                                      id="birthday"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <LocaleReceiver
                                                                        componentName="DatePicker"
                                                                        defaultLocale={
                                                                          Object {
                                                                            "lang": Object {
                                                                              "backToToday": "Back to today",
                                                                              "clear": "Clear",
                                                                              "dateFormat": "M/D/YYYY",
                                                                              "dateSelect": "select date",
                                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                              "dayFormat": "D",
                                                                              "decadeSelect": "Choose a decade",
                                                                              "locale": "en_US",
                                                                              "month": "Month",
                                                                              "monthBeforeYear": true,
                                                                              "monthPlaceholder": "Select month",
                                                                              "monthSelect": "Choose a month",
                                                                              "nextCentury": "Next century",
                                                                              "nextDecade": "Next decade",
                                                                              "nextMonth": "Next month (PageDown)",
                                                                              "nextYear": "Next year (Control + right)",
                                                                              "now": "Now",
                                                                              "ok": "OK",
                                                                              "placeholder": "Select date",
                                                                              "previousCentury": "Last century",
                                                                              "previousDecade": "Last decade",
                                                                              "previousMonth": "Previous month (PageUp)",
                                                                              "previousYear": "Last year (Control + left)",
                                                                              "quarterPlaceholder": "Select quarter",
                                                                              "rangeMonthPlaceholder": Array [
                                                                                "Start month",
                                                                                "End month",
                                                                              ],
                                                                              "rangePlaceholder": Array [
                                                                                "Start date",
                                                                                "End date",
                                                                              ],
                                                                              "rangeQuarterPlaceholder": Array [
                                                                                "Start quarter",
                                                                                "End quarter",
                                                                              ],
                                                                              "rangeWeekPlaceholder": Array [
                                                                                "Start week",
                                                                                "End week",
                                                                              ],
                                                                              "rangeYearPlaceholder": Array [
                                                                                "Start year",
                                                                                "End year",
                                                                              ],
                                                                              "timeSelect": "select time",
                                                                              "today": "Today",
                                                                              "weekPlaceholder": "Select week",
                                                                              "weekSelect": "Choose a week",
                                                                              "year": "Year",
                                                                              "yearFormat": "YYYY",
                                                                              "yearPlaceholder": "Select year",
                                                                              "yearSelect": "Choose a year",
                                                                            },
                                                                            "timePickerLocale": Object {
                                                                              "placeholder": "Select time",
                                                                              "rangePlaceholder": Array [
                                                                                "Start time",
                                                                                "End time",
                                                                              ],
                                                                            },
                                                                          }
                                                                        }
                                                                      >
                                                                        <Picker
                                                                          allowClear={true}
                                                                          className=""
                                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                          components={
                                                                            Object {
                                                                              "button": [Function],
                                                                              "rangeItem": [Function],
                                                                            }
                                                                          }
                                                                          disabled={false}
                                                                          dropdownAlign={
                                                                            Object {
                                                                              "offset": Array [
                                                                                0,
                                                                                4,
                                                                              ],
                                                                              "overflow": Object {
                                                                                "adjustX": 1,
                                                                                "adjustY": 1,
                                                                              },
                                                                              "points": Array [
                                                                                "tl",
                                                                                "bl",
                                                                              ],
                                                                            }
                                                                          }
                                                                          generateConfig={
                                                                            Object {
                                                                              "addDate": [Function],
                                                                              "addMonth": [Function],
                                                                              "addYear": [Function],
                                                                              "getDate": [Function],
                                                                              "getEndDate": [Function],
                                                                              "getFixedDate": [Function],
                                                                              "getHour": [Function],
                                                                              "getMinute": [Function],
                                                                              "getMonth": [Function],
                                                                              "getNow": [Function],
                                                                              "getSecond": [Function],
                                                                              "getWeekDay": [Function],
                                                                              "getYear": [Function],
                                                                              "isAfter": [Function],
                                                                              "isValidate": [Function],
                                                                              "locale": Object {
                                                                                "format": [Function],
                                                                                "getShortMonths": [Function],
                                                                                "getShortWeekDays": [Function],
                                                                                "getWeek": [Function],
                                                                                "getWeekFirstDate": [Function],
                                                                                "getWeekFirstDay": [Function],
                                                                                "parse": [Function],
                                                                              },
                                                                              "setDate": [Function],
                                                                              "setHour": [Function],
                                                                              "setMinute": [Function],
                                                                              "setMonth": [Function],
                                                                              "setSecond": [Function],
                                                                              "setYear": [Function],
                                                                            }
                                                                          }
                                                                          id="birthday"
                                                                          locale={
                                                                            Object {
                                                                              "backToToday": "Back to today",
                                                                              "clear": "Clear",
                                                                              "dateFormat": "M/D/YYYY",
                                                                              "dateSelect": "select date",
                                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                              "dayFormat": "D",
                                                                              "decadeSelect": "Choose a decade",
                                                                              "locale": "en_US",
                                                                              "month": "Month",
                                                                              "monthBeforeYear": true,
                                                                              "monthPlaceholder": "Select month",
                                                                              "monthSelect": "Choose a month",
                                                                              "nextCentury": "Next century",
                                                                              "nextDecade": "Next decade",
                                                                              "nextMonth": "Next month (PageDown)",
                                                                              "nextYear": "Next year (Control + right)",
                                                                              "now": "Now",
                                                                              "ok": "OK",
                                                                              "placeholder": "Select date",
                                                                              "previousCentury": "Last century",
                                                                              "previousDecade": "Last decade",
                                                                              "previousMonth": "Previous month (PageUp)",
                                                                              "previousYear": "Last year (Control + left)",
                                                                              "quarterPlaceholder": "Select quarter",
                                                                              "rangeMonthPlaceholder": Array [
                                                                                "Start month",
                                                                                "End month",
                                                                              ],
                                                                              "rangePlaceholder": Array [
                                                                                "Start date",
                                                                                "End date",
                                                                              ],
                                                                              "rangeQuarterPlaceholder": Array [
                                                                                "Start quarter",
                                                                                "End quarter",
                                                                              ],
                                                                              "rangeWeekPlaceholder": Array [
                                                                                "Start week",
                                                                                "End week",
                                                                              ],
                                                                              "rangeYearPlaceholder": Array [
                                                                                "Start year",
                                                                                "End year",
                                                                              ],
                                                                              "timeSelect": "select time",
                                                                              "today": "Today",
                                                                              "weekPlaceholder": "Select week",
                                                                              "weekSelect": "Choose a week",
                                                                              "year": "Year",
                                                                              "yearFormat": "YYYY",
                                                                              "yearPlaceholder": "Select year",
                                                                              "yearSelect": "Choose a year",
                                                                            }
                                                                          }
                                                                          nextIcon={
                                                                            <span
                                                                              className="ant-picker-next-icon"
                                                                            />
                                                                          }
                                                                          onChange={[Function]}
                                                                          placeholder="Select date"
                                                                          prefixCls="ant-picker"
                                                                          prevIcon={
                                                                            <span
                                                                              className="ant-picker-prev-icon"
                                                                            />
                                                                          }
                                                                          showToday={true}
                                                                          suffixIcon={
                                                                            <React.Fragment>
                                                                              <ForwardRef(CalendarOutlined) />
                                                                            </React.Fragment>
                                                                          }
                                                                          superNextIcon={
                                                                            <span
                                                                              className="ant-picker-super-next-icon"
                                                                            />
                                                                          }
                                                                          superPrevIcon={
                                                                            <span
                                                                              className="ant-picker-super-prev-icon"
                                                                            />
                                                                          }
                                                                          transitionName="ant-slide-up"
                                                                        >
                                                                          <InnerPicker
                                                                            allowClear={true}
                                                                            className=""
                                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                            components={
                                                                              Object {
                                                                                "button": [Function],
                                                                                "rangeItem": [Function],
                                                                              }
                                                                            }
                                                                            disabled={false}
                                                                            dropdownAlign={
                                                                              Object {
                                                                                "offset": Array [
                                                                                  0,
                                                                                  4,
                                                                                ],
                                                                                "overflow": Object {
                                                                                  "adjustX": 1,
                                                                                  "adjustY": 1,
                                                                                },
                                                                                "points": Array [
                                                                                  "tl",
                                                                                  "bl",
                                                                                ],
                                                                              }
                                                                            }
                                                                            generateConfig={
                                                                              Object {
                                                                                "addDate": [Function],
                                                                                "addMonth": [Function],
                                                                                "addYear": [Function],
                                                                                "getDate": [Function],
                                                                                "getEndDate": [Function],
                                                                                "getFixedDate": [Function],
                                                                                "getHour": [Function],
                                                                                "getMinute": [Function],
                                                                                "getMonth": [Function],
                                                                                "getNow": [Function],
                                                                                "getSecond": [Function],
                                                                                "getWeekDay": [Function],
                                                                                "getYear": [Function],
                                                                                "isAfter": [Function],
                                                                                "isValidate": [Function],
                                                                                "locale": Object {
                                                                                  "format": [Function],
                                                                                  "getShortMonths": [Function],
                                                                                  "getShortWeekDays": [Function],
                                                                                  "getWeek": [Function],
                                                                                  "getWeekFirstDate": [Function],
                                                                                  "getWeekFirstDay": [Function],
                                                                                  "parse": [Function],
                                                                                },
                                                                                "setDate": [Function],
                                                                                "setHour": [Function],
                                                                                "setMinute": [Function],
                                                                                "setMonth": [Function],
                                                                                "setSecond": [Function],
                                                                                "setYear": [Function],
                                                                              }
                                                                            }
                                                                            id="birthday"
                                                                            locale={
                                                                              Object {
                                                                                "backToToday": "Back to today",
                                                                                "clear": "Clear",
                                                                                "dateFormat": "M/D/YYYY",
                                                                                "dateSelect": "select date",
                                                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                                "dayFormat": "D",
                                                                                "decadeSelect": "Choose a decade",
                                                                                "locale": "en_US",
                                                                                "month": "Month",
                                                                                "monthBeforeYear": true,
                                                                                "monthPlaceholder": "Select month",
                                                                                "monthSelect": "Choose a month",
                                                                                "nextCentury": "Next century",
                                                                                "nextDecade": "Next decade",
                                                                                "nextMonth": "Next month (PageDown)",
                                                                                "nextYear": "Next year (Control + right)",
                                                                                "now": "Now",
                                                                                "ok": "OK",
                                                                                "placeholder": "Select date",
                                                                                "previousCentury": "Last century",
                                                                                "previousDecade": "Last decade",
                                                                                "previousMonth": "Previous month (PageUp)",
                                                                                "previousYear": "Last year (Control + left)",
                                                                                "quarterPlaceholder": "Select quarter",
                                                                                "rangeMonthPlaceholder": Array [
                                                                                  "Start month",
                                                                                  "End month",
                                                                                ],
                                                                                "rangePlaceholder": Array [
                                                                                  "Start date",
                                                                                  "End date",
                                                                                ],
                                                                                "rangeQuarterPlaceholder": Array [
                                                                                  "Start quarter",
                                                                                  "End quarter",
                                                                                ],
                                                                                "rangeWeekPlaceholder": Array [
                                                                                  "Start week",
                                                                                  "End week",
                                                                                ],
                                                                                "rangeYearPlaceholder": Array [
                                                                                  "Start year",
                                                                                  "End year",
                                                                                ],
                                                                                "timeSelect": "select time",
                                                                                "today": "Today",
                                                                                "weekPlaceholder": "Select week",
                                                                                "weekSelect": "Choose a week",
                                                                                "year": "Year",
                                                                                "yearFormat": "YYYY",
                                                                                "yearPlaceholder": "Select year",
                                                                                "yearSelect": "Choose a year",
                                                                              }
                                                                            }
                                                                            nextIcon={
                                                                              <span
                                                                                className="ant-picker-next-icon"
                                                                              />
                                                                            }
                                                                            onChange={[Function]}
                                                                            pickerRef={
                                                                              Object {
                                                                                "current": Object {
                                                                                  "blur": [Function],
                                                                                  "focus": [Function],
                                                                                },
                                                                              }
                                                                            }
                                                                            placeholder="Select date"
                                                                            prefixCls="ant-picker"
                                                                            prevIcon={
                                                                              <span
                                                                                className="ant-picker-prev-icon"
                                                                              />
                                                                            }
                                                                            showToday={true}
                                                                            suffixIcon={
                                                                              <React.Fragment>
                                                                                <ForwardRef(CalendarOutlined) />
                                                                              </React.Fragment>
                                                                            }
                                                                            superNextIcon={
                                                                              <span
                                                                                className="ant-picker-super-next-icon"
                                                                              />
                                                                            }
                                                                            superPrevIcon={
                                                                              <span
                                                                                className="ant-picker-super-prev-icon"
                                                                              />
                                                                            }
                                                                            transitionName="ant-slide-up"
                                                                          >
                                                                            <PickerTrigger
                                                                              dropdownAlign={
                                                                                Object {
                                                                                  "offset": Array [
                                                                                    0,
                                                                                    4,
                                                                                  ],
                                                                                  "overflow": Object {
                                                                                    "adjustX": 1,
                                                                                    "adjustY": 1,
                                                                                  },
                                                                                  "points": Array [
                                                                                    "tl",
                                                                                    "bl",
                                                                                  ],
                                                                                }
                                                                              }
                                                                              popupElement={
                                                                                <div
                                                                                  className="ant-picker-panel-container"
                                                                                  onMouseDown={[Function]}
                                                                                >
                                                                                  <PickerPanel
                                                                                    allowClear={true}
                                                                                    className="ant-picker-panel-focused"
                                                                                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                                    components={
                                                                                      Object {
                                                                                        "button": [Function],
                                                                                        "rangeItem": [Function],
                                                                                      }
                                                                                    }
                                                                                    disabled={false}
                                                                                    dropdownAlign={
                                                                                      Object {
                                                                                        "offset": Array [
                                                                                          0,
                                                                                          4,
                                                                                        ],
                                                                                        "overflow": Object {
                                                                                          "adjustX": 1,
                                                                                          "adjustY": 1,
                                                                                        },
                                                                                        "points": Array [
                                                                                          "tl",
                                                                                          "bl",
                                                                                        ],
                                                                                      }
                                                                                    }
                                                                                    generateConfig={
                                                                                      Object {
                                                                                        "addDate": [Function],
                                                                                        "addMonth": [Function],
                                                                                        "addYear": [Function],
                                                                                        "getDate": [Function],
                                                                                        "getEndDate": [Function],
                                                                                        "getFixedDate": [Function],
                                                                                        "getHour": [Function],
                                                                                        "getMinute": [Function],
                                                                                        "getMonth": [Function],
                                                                                        "getNow": [Function],
                                                                                        "getSecond": [Function],
                                                                                        "getWeekDay": [Function],
                                                                                        "getYear": [Function],
                                                                                        "isAfter": [Function],
                                                                                        "isValidate": [Function],
                                                                                        "locale": Object {
                                                                                          "format": [Function],
                                                                                          "getShortMonths": [Function],
                                                                                          "getShortWeekDays": [Function],
                                                                                          "getWeek": [Function],
                                                                                          "getWeekFirstDate": [Function],
                                                                                          "getWeekFirstDay": [Function],
                                                                                          "parse": [Function],
                                                                                        },
                                                                                        "setDate": [Function],
                                                                                        "setHour": [Function],
                                                                                        "setMinute": [Function],
                                                                                        "setMonth": [Function],
                                                                                        "setSecond": [Function],
                                                                                        "setYear": [Function],
                                                                                      }
                                                                                    }
                                                                                    id="birthday"
                                                                                    locale={
                                                                                      Object {
                                                                                        "backToToday": "Back to today",
                                                                                        "clear": "Clear",
                                                                                        "dateFormat": "M/D/YYYY",
                                                                                        "dateSelect": "select date",
                                                                                        "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                                        "dayFormat": "D",
                                                                                        "decadeSelect": "Choose a decade",
                                                                                        "locale": "en_US",
                                                                                        "month": "Month",
                                                                                        "monthBeforeYear": true,
                                                                                        "monthPlaceholder": "Select month",
                                                                                        "monthSelect": "Choose a month",
                                                                                        "nextCentury": "Next century",
                                                                                        "nextDecade": "Next decade",
                                                                                        "nextMonth": "Next month (PageDown)",
                                                                                        "nextYear": "Next year (Control + right)",
                                                                                        "now": "Now",
                                                                                        "ok": "OK",
                                                                                        "placeholder": "Select date",
                                                                                        "previousCentury": "Last century",
                                                                                        "previousDecade": "Last decade",
                                                                                        "previousMonth": "Previous month (PageUp)",
                                                                                        "previousYear": "Last year (Control + left)",
                                                                                        "quarterPlaceholder": "Select quarter",
                                                                                        "rangeMonthPlaceholder": Array [
                                                                                          "Start month",
                                                                                          "End month",
                                                                                        ],
                                                                                        "rangePlaceholder": Array [
                                                                                          "Start date",
                                                                                          "End date",
                                                                                        ],
                                                                                        "rangeQuarterPlaceholder": Array [
                                                                                          "Start quarter",
                                                                                          "End quarter",
                                                                                        ],
                                                                                        "rangeWeekPlaceholder": Array [
                                                                                          "Start week",
                                                                                          "End week",
                                                                                        ],
                                                                                        "rangeYearPlaceholder": Array [
                                                                                          "Start year",
                                                                                          "End year",
                                                                                        ],
                                                                                        "timeSelect": "select time",
                                                                                        "today": "Today",
                                                                                        "weekPlaceholder": "Select week",
                                                                                        "weekSelect": "Choose a week",
                                                                                        "year": "Year",
                                                                                        "yearFormat": "YYYY",
                                                                                        "yearPlaceholder": "Select year",
                                                                                        "yearSelect": "Choose a year",
                                                                                      }
                                                                                    }
                                                                                    nextIcon={
                                                                                      <span
                                                                                        className="ant-picker-next-icon"
                                                                                      />
                                                                                    }
                                                                                    onChange={null}
                                                                                    onPanelChange={[Function]}
                                                                                    onSelect={[Function]}
                                                                                    pickerRef={
                                                                                      Object {
                                                                                        "current": Object {
                                                                                          "blur": [Function],
                                                                                          "focus": [Function],
                                                                                        },
                                                                                      }
                                                                                    }
                                                                                    placeholder="Select date"
                                                                                    prefixCls="ant-picker"
                                                                                    prevIcon={
                                                                                      <span
                                                                                        className="ant-picker-prev-icon"
                                                                                      />
                                                                                    }
                                                                                    showToday={true}
                                                                                    suffixIcon={
                                                                                      <React.Fragment>
                                                                                        <ForwardRef(CalendarOutlined) />
                                                                                      </React.Fragment>
                                                                                    }
                                                                                    superNextIcon={
                                                                                      <span
                                                                                        className="ant-picker-super-next-icon"
                                                                                      />
                                                                                    }
                                                                                    superPrevIcon={
                                                                                      <span
                                                                                        className="ant-picker-super-prev-icon"
                                                                                      />
                                                                                    }
                                                                                    tabIndex={-1}
                                                                                    transitionName="ant-slide-up"
                                                                                    value={null}
                                                                                  />
                                                                                </div>
                                                                              }
                                                                              popupPlacement="bottomLeft"
                                                                              prefixCls="ant-picker"
                                                                              transitionName="ant-slide-up"
                                                                              visible={false}
                                                                            >
                                                                              <Trigger
                                                                                action={Array []}
                                                                                afterPopupVisibleChange={[Function]}
                                                                                autoDestroy={false}
                                                                                blurDelay={0.15}
                                                                                builtinPlacements={
                                                                                  Object {
                                                                                    "bottomLeft": Object {
                                                                                      "offset": Array [
                                                                                        0,
                                                                                        4,
                                                                                      ],
                                                                                      "overflow": Object {
                                                                                        "adjustX": 1,
                                                                                        "adjustY": 1,
                                                                                      },
                                                                                      "points": Array [
                                                                                        "tl",
                                                                                        "bl",
                                                                                      ],
                                                                                    },
                                                                                    "bottomRight": Object {
                                                                                      "offset": Array [
                                                                                        0,
                                                                                        4,
                                                                                      ],
                                                                                      "overflow": Object {
                                                                                        "adjustX": 1,
                                                                                        "adjustY": 1,
                                                                                      },
                                                                                      "points": Array [
                                                                                        "tr",
                                                                                        "br",
                                                                                      ],
                                                                                    },
                                                                                    "topLeft": Object {
                                                                                      "offset": Array [
                                                                                        0,
                                                                                        -4,
                                                                                      ],
                                                                                      "overflow": Object {
                                                                                        "adjustX": 0,
                                                                                        "adjustY": 1,
                                                                                      },
                                                                                      "points": Array [
                                                                                        "bl",
                                                                                        "tl",
                                                                                      ],
                                                                                    },
                                                                                    "topRight": Object {
                                                                                      "offset": Array [
                                                                                        0,
                                                                                        -4,
                                                                                      ],
                                                                                      "overflow": Object {
                                                                                        "adjustX": 0,
                                                                                        "adjustY": 1,
                                                                                      },
                                                                                      "points": Array [
                                                                                        "br",
                                                                                        "tr",
                                                                                      ],
                                                                                    },
                                                                                  }
                                                                                }
                                                                                defaultPopupVisible={false}
                                                                                destroyPopupOnHide={false}
                                                                                focusDelay={0}
                                                                                getDocument={[Function]}
                                                                                getPopupClassNameFromAlign={[Function]}
                                                                                hideAction={Array []}
                                                                                mask={false}
                                                                                maskClosable={true}
                                                                                mouseEnterDelay={0}
                                                                                mouseLeaveDelay={0.1}
                                                                                onPopupAlign={[Function]}
                                                                                onPopupVisibleChange={[Function]}
                                                                                popup={
                                                                                  <div
                                                                                    className="ant-picker-panel-container"
                                                                                    onMouseDown={[Function]}
                                                                                  >
                                                                                    <PickerPanel
                                                                                      allowClear={true}
                                                                                      className="ant-picker-panel-focused"
                                                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                                      components={
                                                                                        Object {
                                                                                          "button": [Function],
                                                                                          "rangeItem": [Function],
                                                                                        }
                                                                                      }
                                                                                      disabled={false}
                                                                                      dropdownAlign={
                                                                                        Object {
                                                                                          "offset": Array [
                                                                                            0,
                                                                                            4,
                                                                                          ],
                                                                                          "overflow": Object {
                                                                                            "adjustX": 1,
                                                                                            "adjustY": 1,
                                                                                          },
                                                                                          "points": Array [
                                                                                            "tl",
                                                                                            "bl",
                                                                                          ],
                                                                                        }
                                                                                      }
                                                                                      generateConfig={
                                                                                        Object {
                                                                                          "addDate": [Function],
                                                                                          "addMonth": [Function],
                                                                                          "addYear": [Function],
                                                                                          "getDate": [Function],
                                                                                          "getEndDate": [Function],
                                                                                          "getFixedDate": [Function],
                                                                                          "getHour": [Function],
                                                                                          "getMinute": [Function],
                                                                                          "getMonth": [Function],
                                                                                          "getNow": [Function],
                                                                                          "getSecond": [Function],
                                                                                          "getWeekDay": [Function],
                                                                                          "getYear": [Function],
                                                                                          "isAfter": [Function],
                                                                                          "isValidate": [Function],
                                                                                          "locale": Object {
                                                                                            "format": [Function],
                                                                                            "getShortMonths": [Function],
                                                                                            "getShortWeekDays": [Function],
                                                                                            "getWeek": [Function],
                                                                                            "getWeekFirstDate": [Function],
                                                                                            "getWeekFirstDay": [Function],
                                                                                            "parse": [Function],
                                                                                          },
                                                                                          "setDate": [Function],
                                                                                          "setHour": [Function],
                                                                                          "setMinute": [Function],
                                                                                          "setMonth": [Function],
                                                                                          "setSecond": [Function],
                                                                                          "setYear": [Function],
                                                                                        }
                                                                                      }
                                                                                      id="birthday"
                                                                                      locale={
                                                                                        Object {
                                                                                          "backToToday": "Back to today",
                                                                                          "clear": "Clear",
                                                                                          "dateFormat": "M/D/YYYY",
                                                                                          "dateSelect": "select date",
                                                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                                          "dayFormat": "D",
                                                                                          "decadeSelect": "Choose a decade",
                                                                                          "locale": "en_US",
                                                                                          "month": "Month",
                                                                                          "monthBeforeYear": true,
                                                                                          "monthPlaceholder": "Select month",
                                                                                          "monthSelect": "Choose a month",
                                                                                          "nextCentury": "Next century",
                                                                                          "nextDecade": "Next decade",
                                                                                          "nextMonth": "Next month (PageDown)",
                                                                                          "nextYear": "Next year (Control + right)",
                                                                                          "now": "Now",
                                                                                          "ok": "OK",
                                                                                          "placeholder": "Select date",
                                                                                          "previousCentury": "Last century",
                                                                                          "previousDecade": "Last decade",
                                                                                          "previousMonth": "Previous month (PageUp)",
                                                                                          "previousYear": "Last year (Control + left)",
                                                                                          "quarterPlaceholder": "Select quarter",
                                                                                          "rangeMonthPlaceholder": Array [
                                                                                            "Start month",
                                                                                            "End month",
                                                                                          ],
                                                                                          "rangePlaceholder": Array [
                                                                                            "Start date",
                                                                                            "End date",
                                                                                          ],
                                                                                          "rangeQuarterPlaceholder": Array [
                                                                                            "Start quarter",
                                                                                            "End quarter",
                                                                                          ],
                                                                                          "rangeWeekPlaceholder": Array [
                                                                                            "Start week",
                                                                                            "End week",
                                                                                          ],
                                                                                          "rangeYearPlaceholder": Array [
                                                                                            "Start year",
                                                                                            "End year",
                                                                                          ],
                                                                                          "timeSelect": "select time",
                                                                                          "today": "Today",
                                                                                          "weekPlaceholder": "Select week",
                                                                                          "weekSelect": "Choose a week",
                                                                                          "year": "Year",
                                                                                          "yearFormat": "YYYY",
                                                                                          "yearPlaceholder": "Select year",
                                                                                          "yearSelect": "Choose a year",
                                                                                        }
                                                                                      }
                                                                                      nextIcon={
                                                                                        <span
                                                                                          className="ant-picker-next-icon"
                                                                                        />
                                                                                      }
                                                                                      onChange={null}
                                                                                      onPanelChange={[Function]}
                                                                                      onSelect={[Function]}
                                                                                      pickerRef={
                                                                                        Object {
                                                                                          "current": Object {
                                                                                            "blur": [Function],
                                                                                            "focus": [Function],
                                                                                          },
                                                                                        }
                                                                                      }
                                                                                      placeholder="Select date"
                                                                                      prefixCls="ant-picker"
                                                                                      prevIcon={
                                                                                        <span
                                                                                          className="ant-picker-prev-icon"
                                                                                        />
                                                                                      }
                                                                                      showToday={true}
                                                                                      suffixIcon={
                                                                                        <React.Fragment>
                                                                                          <ForwardRef(CalendarOutlined) />
                                                                                        </React.Fragment>
                                                                                      }
                                                                                      superNextIcon={
                                                                                        <span
                                                                                          className="ant-picker-super-next-icon"
                                                                                        />
                                                                                      }
                                                                                      superPrevIcon={
                                                                                        <span
                                                                                          className="ant-picker-super-prev-icon"
                                                                                        />
                                                                                      }
                                                                                      tabIndex={-1}
                                                                                      transitionName="ant-slide-up"
                                                                                      value={null}
                                                                                    />
                                                                                  </div>
                                                                                }
                                                                                popupAlign={
                                                                                  Object {
                                                                                    "offset": Array [
                                                                                      0,
                                                                                      4,
                                                                                    ],
                                                                                    "overflow": Object {
                                                                                      "adjustX": 1,
                                                                                      "adjustY": 1,
                                                                                    },
                                                                                    "points": Array [
                                                                                      "tl",
                                                                                      "bl",
                                                                                    ],
                                                                                  }
                                                                                }
                                                                                popupClassName=""
                                                                                popupPlacement="bottomLeft"
                                                                                popupStyle={Object {}}
                                                                                popupTransitionName="ant-slide-up"
                                                                                popupVisible={false}
                                                                                prefixCls="ant-picker-dropdown"
                                                                                showAction={Array []}
                                                                              >
                                                                                <div
                                                                                  className="ant-picker"
                                                                                  key="trigger"
                                                                                  onMouseUp={[Function]}
                                                                                >
                                                                                  <div
                                                                                    className="ant-picker-input"
                                                                                  >
                                                                                    <input
                                                                                      autoComplete="off"
                                                                                      disabled={false}
                                                                                      id="birthday"
                                                                                      onBlur={[Function]}
                                                                                      onChange={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      onKeyDown={[Function]}
                                                                                      onMouseDown={[Function]}
                                                                                      placeholder="Select date"
                                                                                      readOnly={true}
                                                                                      size={12}
                                                                                      title=""
                                                                                      value=""
                                                                                    />
                                                                                    <span
                                                                                      className="ant-picker-suffix"
                                                                                    >
                                                                                      <ForwardRef(CalendarOutlined)>
                                                                                        <AntdIcon
                                                                                          icon={
                                                                                            Object {
                                                                                              "icon": Object {
                                                                                                "attrs": Object {
                                                                                                  "focusable": "false",
                                                                                                  "viewBox": "64 64 896 896",
                                                                                                },
                                                                                                "children": Array [
                                                                                                  Object {
                                                                                                    "attrs": Object {
                                                                                                      "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                                    },
                                                                                                    "tag": "path",
                                                                                                  },
                                                                                                ],
                                                                                                "tag": "svg",
                                                                                              },
                                                                                              "name": "calendar",
                                                                                              "theme": "outlined",
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <span
                                                                                            aria-label="calendar"
                                                                                            className="anticon anticon-calendar"
                                                                                            role="img"
                                                                                          >
                                                                                            <IconReact
                                                                                              icon={
                                                                                                Object {
                                                                                                  "icon": Object {
                                                                                                    "attrs": Object {
                                                                                                      "focusable": "false",
                                                                                                      "viewBox": "64 64 896 896",
                                                                                                    },
                                                                                                    "children": Array [
                                                                                                      Object {
                                                                                                        "attrs": Object {
                                                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                                        },
                                                                                                        "tag": "path",
                                                                                                      },
                                                                                                    ],
                                                                                                    "tag": "svg",
                                                                                                  },
                                                                                                  "name": "calendar",
                                                                                                  "theme": "outlined",
                                                                                                }
                                                                                              }
                                                                                            >
                                                                                              <svg
                                                                                                aria-hidden="true"
                                                                                                data-icon="calendar"
                                                                                                fill="currentColor"
                                                                                                focusable="false"
                                                                                                height="1em"
                                                                                                key="svg-calendar"
                                                                                                viewBox="64 64 896 896"
                                                                                                width="1em"
                                                                                              >
                                                                                                <path
                                                                                                  d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                                                  key="svg-calendar-svg-0"
                                                                                                />
                                                                                              </svg>
                                                                                            </IconReact>
                                                                                          </span>
                                                                                        </AntdIcon>
                                                                                      </ForwardRef(CalendarOutlined)>
                                                                                    </span>
                                                                                  </div>
                                                                                </div>
                                                                              </Trigger>
                                                                            </PickerTrigger>
                                                                          </InnerPicker>
                                                                        </Picker>
                                                                      </LocaleReceiver>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                name="address"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please fill your address",
                                                      "required": true,
                                                    },
                                                    Object {
                                                      "max": 40,
                                                    },
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  messageVariables={
                                                    Object {
                                                      "label": "address",
                                                    }
                                                  }
                                                  name="address"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please fill your address",
                                                        "required": true,
                                                      },
                                                      Object {
                                                        "max": 40,
                                                      },
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_address"
                                                    messageVariables={
                                                      Object {
                                                        "label": "address",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "address",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please fill your address",
                                                          "required": true,
                                                        },
                                                        Object {
                                                          "max": 40,
                                                        },
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          htmlFor="address"
                                                          name="address"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your address",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 40,
                                                              },
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your address",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "max": 40,
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <ForwardRef
                                                                        placeholder="Address"
                                                                      />
                                                                    }
                                                                  >
                                                                    <ForwardRef
                                                                      id="address"
                                                                      onChange={[Function]}
                                                                      placeholder="Address"
                                                                    >
                                                                      <ForwardRef
                                                                        affixWrapperClassName=""
                                                                        groupClassName=""
                                                                        id="address"
                                                                        inputClassName=""
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        placeholder="Address"
                                                                        prefixCls="ant-input"
                                                                        wrapperClassName=""
                                                                      >
                                                                        <BaseInput
                                                                          affixWrapperClassName=""
                                                                          focused={false}
                                                                          groupClassName=""
                                                                          handleReset={[Function]}
                                                                          id="address"
                                                                          inputElement={
                                                                            <input
                                                                              className="ant-input"
                                                                              id="address"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              placeholder="Address"
                                                                              type="text"
                                                                            />
                                                                          }
                                                                          placeholder="Address"
                                                                          prefixCls="ant-input"
                                                                          suffix={null}
                                                                          triggerFocus={[Function]}
                                                                          value=""
                                                                          wrapperClassName=""
                                                                        >
                                                                          <input
                                                                            className="ant-input"
                                                                            id="address"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            placeholder="Address"
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </BaseInput>
                                                                      </ForwardRef>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                name="email"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please fill your email!",
                                                      "required": true,
                                                    },
                                                    Object {
                                                      "message": "Invalid E-mail!",
                                                      "type": "email",
                                                    },
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  messageVariables={
                                                    Object {
                                                      "label": "email",
                                                    }
                                                  }
                                                  name="email"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please fill your email!",
                                                        "required": true,
                                                      },
                                                      Object {
                                                        "message": "Invalid E-mail!",
                                                        "type": "email",
                                                      },
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_email"
                                                    messageVariables={
                                                      Object {
                                                        "label": "email",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "email",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please fill your email!",
                                                          "required": true,
                                                        },
                                                        Object {
                                                          "message": "Invalid E-mail!",
                                                          "type": "email",
                                                        },
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          htmlFor="email"
                                                          name="email"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your email!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "message": "Invalid E-mail!",
                                                                "type": "email",
                                                              },
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your email!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "message": "Invalid E-mail!",
                                                                "type": "email",
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <ForwardRef
                                                                        placeholder="Email"
                                                                      />
                                                                    }
                                                                  >
                                                                    <ForwardRef
                                                                      id="email"
                                                                      onChange={[Function]}
                                                                      placeholder="Email"
                                                                    >
                                                                      <ForwardRef
                                                                        affixWrapperClassName=""
                                                                        groupClassName=""
                                                                        id="email"
                                                                        inputClassName=""
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        placeholder="Email"
                                                                        prefixCls="ant-input"
                                                                        wrapperClassName=""
                                                                      >
                                                                        <BaseInput
                                                                          affixWrapperClassName=""
                                                                          focused={false}
                                                                          groupClassName=""
                                                                          handleReset={[Function]}
                                                                          id="email"
                                                                          inputElement={
                                                                            <input
                                                                              className="ant-input"
                                                                              id="email"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              placeholder="Email"
                                                                              type="text"
                                                                            />
                                                                          }
                                                                          placeholder="Email"
                                                                          prefixCls="ant-input"
                                                                          suffix={null}
                                                                          triggerFocus={[Function]}
                                                                          value=""
                                                                          wrapperClassName=""
                                                                        >
                                                                          <input
                                                                            className="ant-input"
                                                                            id="email"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            placeholder="Email"
                                                                            type="text"
                                                                            value=""
                                                                          />
                                                                        </BaseInput>
                                                                      </ForwardRef>
                                                                    </ForwardRef>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                name="password"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please fill your password!",
                                                      "required": true,
                                                    },
                                                    Object {
                                                      "message": "password must be at least 8 characters",
                                                      "min": 8,
                                                    },
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  messageVariables={
                                                    Object {
                                                      "label": "password",
                                                    }
                                                  }
                                                  name="password"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please fill your password!",
                                                        "required": true,
                                                      },
                                                      Object {
                                                        "message": "password must be at least 8 characters",
                                                        "min": 8,
                                                      },
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_password"
                                                    messageVariables={
                                                      Object {
                                                        "label": "password",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "password",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please fill your password!",
                                                          "required": true,
                                                        },
                                                        Object {
                                                          "message": "password must be at least 8 characters",
                                                          "min": 8,
                                                        },
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          htmlFor="password"
                                                          name="password"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your password!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "message": "password must be at least 8 characters",
                                                                "min": 8,
                                                              },
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please fill your password!",
                                                                "required": true,
                                                              },
                                                              Object {
                                                                "message": "password must be at least 8 characters",
                                                                "min": 8,
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <Password
                                                                        action="click"
                                                                        iconRender={[Function]}
                                                                        placeholder="Password"
                                                                        visibilityToggle={true}
                                                                      />
                                                                    }
                                                                  >
                                                                    <Password
                                                                      action="click"
                                                                      iconRender={[Function]}
                                                                      id="password"
                                                                      onChange={[Function]}
                                                                      placeholder="Password"
                                                                      visibilityToggle={true}
                                                                    >
                                                                      <ForwardRef
                                                                        action="click"
                                                                        className="ant-input-password"
                                                                        id="password"
                                                                        onChange={[Function]}
                                                                        placeholder="Password"
                                                                        prefixCls="ant-input"
                                                                        suffix={
                                                                          <ForwardRef(EyeInvisibleOutlined)
                                                                            className="ant-input-password-icon"
                                                                            onClick={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseUp={[Function]}
                                                                          />
                                                                        }
                                                                        type="password"
                                                                      >
                                                                        <ForwardRef
                                                                          action="click"
                                                                          affixWrapperClassName=""
                                                                          className="ant-input-password"
                                                                          groupClassName=""
                                                                          id="password"
                                                                          inputClassName=""
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          placeholder="Password"
                                                                          prefixCls="ant-input"
                                                                          suffix={
                                                                            <React.Fragment>
                                                                              <ForwardRef(EyeInvisibleOutlined)
                                                                                className="ant-input-password-icon"
                                                                                onClick={[Function]}
                                                                                onMouseDown={[Function]}
                                                                                onMouseUp={[Function]}
                                                                              />
                                                                            </React.Fragment>
                                                                          }
                                                                          type="password"
                                                                          wrapperClassName=""
                                                                        >
                                                                          <BaseInput
                                                                            action="click"
                                                                            affixWrapperClassName=""
                                                                            className="ant-input-password"
                                                                            focused={false}
                                                                            groupClassName=""
                                                                            handleReset={[Function]}
                                                                            id="password"
                                                                            inputElement={
                                                                              <input
                                                                                action="click"
                                                                                className="ant-input"
                                                                                id="password"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onKeyDown={[Function]}
                                                                                placeholder="Password"
                                                                                type="password"
                                                                              />
                                                                            }
                                                                            placeholder="Password"
                                                                            prefixCls="ant-input"
                                                                            suffix={
                                                                              <React.Fragment>
                                                                                <React.Fragment>
                                                                                  <ForwardRef(EyeInvisibleOutlined)
                                                                                    className="ant-input-password-icon"
                                                                                    onClick={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                  />
                                                                                </React.Fragment>
                                                                              </React.Fragment>
                                                                            }
                                                                            triggerFocus={[Function]}
                                                                            value=""
                                                                            wrapperClassName=""
                                                                          >
                                                                            <span
                                                                              className="ant-input-affix-wrapper ant-input-password"
                                                                              onMouseDown={[Function]}
                                                                            >
                                                                              <input
                                                                                action="click"
                                                                                className="ant-input"
                                                                                hidden={null}
                                                                                id="password"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onKeyDown={[Function]}
                                                                                placeholder="Password"
                                                                                style={null}
                                                                                type="password"
                                                                                value=""
                                                                              />
                                                                              <span
                                                                                className="ant-input-suffix"
                                                                              >
                                                                                <ForwardRef(EyeInvisibleOutlined)
                                                                                  className="ant-input-password-icon"
                                                                                  key="passwordIcon"
                                                                                  onClick={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                >
                                                                                  <AntdIcon
                                                                                    className="ant-input-password-icon"
                                                                                    icon={
                                                                                      Object {
                                                                                        "icon": Object {
                                                                                          "attrs": Object {
                                                                                            "focusable": "false",
                                                                                            "viewBox": "64 64 896 896",
                                                                                          },
                                                                                          "children": Array [
                                                                                            Object {
                                                                                              "attrs": Object {
                                                                                                "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z",
                                                                                              },
                                                                                              "tag": "path",
                                                                                            },
                                                                                            Object {
                                                                                              "attrs": Object {
                                                                                                "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z",
                                                                                              },
                                                                                              "tag": "path",
                                                                                            },
                                                                                          ],
                                                                                          "tag": "svg",
                                                                                        },
                                                                                        "name": "eye-invisible",
                                                                                        "theme": "outlined",
                                                                                      }
                                                                                    }
                                                                                    onClick={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                  >
                                                                                    <span
                                                                                      aria-label="eye-invisible"
                                                                                      className="anticon anticon-eye-invisible ant-input-password-icon"
                                                                                      onClick={[Function]}
                                                                                      onMouseDown={[Function]}
                                                                                      onMouseUp={[Function]}
                                                                                      role="img"
                                                                                      tabIndex={-1}
                                                                                    >
                                                                                      <IconReact
                                                                                        icon={
                                                                                          Object {
                                                                                            "icon": Object {
                                                                                              "attrs": Object {
                                                                                                "focusable": "false",
                                                                                                "viewBox": "64 64 896 896",
                                                                                              },
                                                                                              "children": Array [
                                                                                                Object {
                                                                                                  "attrs": Object {
                                                                                                    "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z",
                                                                                                  },
                                                                                                  "tag": "path",
                                                                                                },
                                                                                                Object {
                                                                                                  "attrs": Object {
                                                                                                    "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z",
                                                                                                  },
                                                                                                  "tag": "path",
                                                                                                },
                                                                                              ],
                                                                                              "tag": "svg",
                                                                                            },
                                                                                            "name": "eye-invisible",
                                                                                            "theme": "outlined",
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <svg
                                                                                          aria-hidden="true"
                                                                                          data-icon="eye-invisible"
                                                                                          fill="currentColor"
                                                                                          focusable="false"
                                                                                          height="1em"
                                                                                          key="svg-eye-invisible"
                                                                                          viewBox="64 64 896 896"
                                                                                          width="1em"
                                                                                        >
                                                                                          <path
                                                                                            d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                                                                                            key="svg-eye-invisible-svg-0"
                                                                                          />
                                                                                          <path
                                                                                            d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                                                                                            key="svg-eye-invisible-svg-1"
                                                                                          />
                                                                                        </svg>
                                                                                      </IconReact>
                                                                                    </span>
                                                                                  </AntdIcon>
                                                                                </ForwardRef(EyeInvisibleOutlined)>
                                                                              </span>
                                                                            </span>
                                                                          </BaseInput>
                                                                        </ForwardRef>
                                                                      </ForwardRef>
                                                                    </Password>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-group"
                                            >
                                              <FormItem
                                                className="form-control"
                                                dependencies={
                                                  Array [
                                                    "password",
                                                  ]
                                                }
                                                name="confirm"
                                                rules={
                                                  Array [
                                                    Object {
                                                      "message": "Please confirm your password!",
                                                      "required": true,
                                                    },
                                                    [Function],
                                                    Object {
                                                      "message": "password must be at least 8 characters",
                                                      "min": 8,
                                                    },
                                                    Object {
                                                      "max": 20,
                                                      "message": "password must not be longer than 20 characters",
                                                    },
                                                  ]
                                                }
                                              >
                                                <WrapperField
                                                  className="form-control"
                                                  dependencies={
                                                    Array [
                                                      "password",
                                                    ]
                                                  }
                                                  messageVariables={
                                                    Object {
                                                      "label": "confirm",
                                                    }
                                                  }
                                                  name="confirm"
                                                  onMetaChange={[Function]}
                                                  rules={
                                                    Array [
                                                      Object {
                                                        "message": "Please confirm your password!",
                                                        "required": true,
                                                      },
                                                      [Function],
                                                      Object {
                                                        "message": "password must be at least 8 characters",
                                                        "min": 8,
                                                      },
                                                      Object {
                                                        "max": 20,
                                                        "message": "password must not be longer than 20 characters",
                                                      },
                                                    ]
                                                  }
                                                  trigger="onChange"
                                                  validateTrigger="onChange"
                                                >
                                                  <Field
                                                    className="form-control"
                                                    dependencies={
                                                      Array [
                                                        "password",
                                                      ]
                                                    }
                                                    fieldContext={
                                                      Object {
                                                        "__INTERNAL__": Object {
                                                          "itemRef": [Function],
                                                          "name": undefined,
                                                        },
                                                        "_init": true,
                                                        "getFieldError": [Function],
                                                        "getFieldInstance": [Function],
                                                        "getFieldValue": [Function],
                                                        "getFieldWarning": [Function],
                                                        "getFieldsError": [Function],
                                                        "getFieldsValue": [Function],
                                                        "getInternalHooks": [Function],
                                                        "isFieldTouched": [Function],
                                                        "isFieldValidating": [Function],
                                                        "isFieldsTouched": [Function],
                                                        "isFieldsValidating": [Function],
                                                        "resetFields": [Function],
                                                        "scrollToField": [Function],
                                                        "setFields": [Function],
                                                        "setFieldsValue": [Function],
                                                        "submit": [Function],
                                                        "validateFields": [Function],
                                                        "validateTrigger": "onChange",
                                                      }
                                                    }
                                                    key="_confirm"
                                                    messageVariables={
                                                      Object {
                                                        "label": "confirm",
                                                      }
                                                    }
                                                    name={
                                                      Array [
                                                        "confirm",
                                                      ]
                                                    }
                                                    onMetaChange={[Function]}
                                                    rules={
                                                      Array [
                                                        Object {
                                                          "message": "Please confirm your password!",
                                                          "required": true,
                                                        },
                                                        [Function],
                                                        Object {
                                                          "message": "password must be at least 8 characters",
                                                          "min": 8,
                                                        },
                                                        Object {
                                                          "max": 20,
                                                          "message": "password must not be longer than 20 characters",
                                                        },
                                                      ]
                                                    }
                                                    trigger="onChange"
                                                    validateTrigger="onChange"
                                                    valuePropName="value"
                                                  >
                                                    <Row
                                                      className="ant-form-item form-control"
                                                      key="row"
                                                    >
                                                      <div
                                                        className="ant-row ant-form-item form-control"
                                                        style={Object {}}
                                                      >
                                                        <FormItemLabel
                                                          className="form-control"
                                                          dependencies={
                                                            Array [
                                                              "password",
                                                            ]
                                                          }
                                                          htmlFor="confirm"
                                                          name="confirm"
                                                          prefixCls="ant-form"
                                                          required={true}
                                                          requiredMark={true}
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please confirm your password!",
                                                                "required": true,
                                                              },
                                                              [Function],
                                                              Object {
                                                                "message": "password must be at least 8 characters",
                                                                "min": 8,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "password must not be longer than 20 characters",
                                                              },
                                                            ]
                                                          }
                                                        />
                                                        <FormItemInput
                                                          className="form-control"
                                                          dependencies={
                                                            Array [
                                                              "password",
                                                            ]
                                                          }
                                                          errors={Array []}
                                                          name={Array []}
                                                          prefixCls="ant-form"
                                                          rules={
                                                            Array [
                                                              Object {
                                                                "message": "Please confirm your password!",
                                                                "required": true,
                                                              },
                                                              [Function],
                                                              Object {
                                                                "message": "password must be at least 8 characters",
                                                                "min": 8,
                                                              },
                                                              Object {
                                                                "max": 20,
                                                                "message": "password must not be longer than 20 characters",
                                                              },
                                                            ]
                                                          }
                                                          status=""
                                                          touched={false}
                                                          validating={false}
                                                          warnings={Array []}
                                                        >
                                                          <Col
                                                            className="ant-form-item-control"
                                                          >
                                                            <div
                                                              className="ant-col ant-form-item-control"
                                                              style={Object {}}
                                                            >
                                                              <div
                                                                className="ant-form-item-control-input"
                                                              >
                                                                <div
                                                                  className="ant-form-item-control-input-content"
                                                                >
                                                                  <Component
                                                                    update={
                                                                      <Password
                                                                        action="click"
                                                                        iconRender={[Function]}
                                                                        placeholder="Confirm password"
                                                                        visibilityToggle={true}
                                                                      />
                                                                    }
                                                                  >
                                                                    <Password
                                                                      action="click"
                                                                      iconRender={[Function]}
                                                                      id="confirm"
                                                                      onChange={[Function]}
                                                                      placeholder="Confirm password"
                                                                      visibilityToggle={true}
                                                                    >
                                                                      <ForwardRef
                                                                        action="click"
                                                                        className="ant-input-password"
                                                                        id="confirm"
                                                                        onChange={[Function]}
                                                                        placeholder="Confirm password"
                                                                        prefixCls="ant-input"
                                                                        suffix={
                                                                          <ForwardRef(EyeInvisibleOutlined)
                                                                            className="ant-input-password-icon"
                                                                            onClick={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseUp={[Function]}
                                                                          />
                                                                        }
                                                                        type="password"
                                                                      >
                                                                        <ForwardRef
                                                                          action="click"
                                                                          affixWrapperClassName=""
                                                                          className="ant-input-password"
                                                                          groupClassName=""
                                                                          id="confirm"
                                                                          inputClassName=""
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          placeholder="Confirm password"
                                                                          prefixCls="ant-input"
                                                                          suffix={
                                                                            <React.Fragment>
                                                                              <ForwardRef(EyeInvisibleOutlined)
                                                                                className="ant-input-password-icon"
                                                                                onClick={[Function]}
                                                                                onMouseDown={[Function]}
                                                                                onMouseUp={[Function]}
                                                                              />
                                                                            </React.Fragment>
                                                                          }
                                                                          type="password"
                                                                          wrapperClassName=""
                                                                        >
                                                                          <BaseInput
                                                                            action="click"
                                                                            affixWrapperClassName=""
                                                                            className="ant-input-password"
                                                                            focused={false}
                                                                            groupClassName=""
                                                                            handleReset={[Function]}
                                                                            id="confirm"
                                                                            inputElement={
                                                                              <input
                                                                                action="click"
                                                                                className="ant-input"
                                                                                id="confirm"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onKeyDown={[Function]}
                                                                                placeholder="Confirm password"
                                                                                type="password"
                                                                              />
                                                                            }
                                                                            placeholder="Confirm password"
                                                                            prefixCls="ant-input"
                                                                            suffix={
                                                                              <React.Fragment>
                                                                                <React.Fragment>
                                                                                  <ForwardRef(EyeInvisibleOutlined)
                                                                                    className="ant-input-password-icon"
                                                                                    onClick={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                  />
                                                                                </React.Fragment>
                                                                              </React.Fragment>
                                                                            }
                                                                            triggerFocus={[Function]}
                                                                            value=""
                                                                            wrapperClassName=""
                                                                          >
                                                                            <span
                                                                              className="ant-input-affix-wrapper ant-input-password"
                                                                              onMouseDown={[Function]}
                                                                            >
                                                                              <input
                                                                                action="click"
                                                                                className="ant-input"
                                                                                hidden={null}
                                                                                id="confirm"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onKeyDown={[Function]}
                                                                                placeholder="Confirm password"
                                                                                style={null}
                                                                                type="password"
                                                                                value=""
                                                                              />
                                                                              <span
                                                                                className="ant-input-suffix"
                                                                              >
                                                                                <ForwardRef(EyeInvisibleOutlined)
                                                                                  className="ant-input-password-icon"
                                                                                  key="passwordIcon"
                                                                                  onClick={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                >
                                                                                  <AntdIcon
                                                                                    className="ant-input-password-icon"
                                                                                    icon={
                                                                                      Object {
                                                                                        "icon": Object {
                                                                                          "attrs": Object {
                                                                                            "focusable": "false",
                                                                                            "viewBox": "64 64 896 896",
                                                                                          },
                                                                                          "children": Array [
                                                                                            Object {
                                                                                              "attrs": Object {
                                                                                                "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z",
                                                                                              },
                                                                                              "tag": "path",
                                                                                            },
                                                                                            Object {
                                                                                              "attrs": Object {
                                                                                                "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z",
                                                                                              },
                                                                                              "tag": "path",
                                                                                            },
                                                                                          ],
                                                                                          "tag": "svg",
                                                                                        },
                                                                                        "name": "eye-invisible",
                                                                                        "theme": "outlined",
                                                                                      }
                                                                                    }
                                                                                    onClick={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                  >
                                                                                    <span
                                                                                      aria-label="eye-invisible"
                                                                                      className="anticon anticon-eye-invisible ant-input-password-icon"
                                                                                      onClick={[Function]}
                                                                                      onMouseDown={[Function]}
                                                                                      onMouseUp={[Function]}
                                                                                      role="img"
                                                                                      tabIndex={-1}
                                                                                    >
                                                                                      <IconReact
                                                                                        icon={
                                                                                          Object {
                                                                                            "icon": Object {
                                                                                              "attrs": Object {
                                                                                                "focusable": "false",
                                                                                                "viewBox": "64 64 896 896",
                                                                                              },
                                                                                              "children": Array [
                                                                                                Object {
                                                                                                  "attrs": Object {
                                                                                                    "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z",
                                                                                                  },
                                                                                                  "tag": "path",
                                                                                                },
                                                                                                Object {
                                                                                                  "attrs": Object {
                                                                                                    "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z",
                                                                                                  },
                                                                                                  "tag": "path",
                                                                                                },
                                                                                              ],
                                                                                              "tag": "svg",
                                                                                            },
                                                                                            "name": "eye-invisible",
                                                                                            "theme": "outlined",
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <svg
                                                                                          aria-hidden="true"
                                                                                          data-icon="eye-invisible"
                                                                                          fill="currentColor"
                                                                                          focusable="false"
                                                                                          height="1em"
                                                                                          key="svg-eye-invisible"
                                                                                          viewBox="64 64 896 896"
                                                                                          width="1em"
                                                                                        >
                                                                                          <path
                                                                                            d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                                                                                            key="svg-eye-invisible-svg-0"
                                                                                          />
                                                                                          <path
                                                                                            d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                                                                                            key="svg-eye-invisible-svg-1"
                                                                                          />
                                                                                        </svg>
                                                                                      </IconReact>
                                                                                    </span>
                                                                                  </AntdIcon>
                                                                                </ForwardRef(EyeInvisibleOutlined)>
                                                                              </span>
                                                                            </span>
                                                                          </BaseInput>
                                                                        </ForwardRef>
                                                                      </ForwardRef>
                                                                    </Password>
                                                                  </Component>
                                                                </div>
                                                              </div>
                                                              <ErrorList
                                                                className="ant-form-item-explain-connected"
                                                                errors={Array []}
                                                                helpStatus=""
                                                                warnings={Array []}
                                                              >
                                                                <CSSMotion
                                                                  motionAppear={false}
                                                                  motionDeadline={500}
                                                                  motionEnter={false}
                                                                  motionName="ant-show-help"
                                                                  onAppearActive={[Function]}
                                                                  onAppearEnd={[Function]}
                                                                  onAppearStart={[Function]}
                                                                  onEnterActive={[Function]}
                                                                  onEnterEnd={[Function]}
                                                                  onEnterStart={[Function]}
                                                                  onLeaveActive={[Function]}
                                                                  onLeaveEnd={[Function]}
                                                                  onLeaveStart={[Function]}
                                                                  visible={false}
                                                                >
                                                                  <DomWrapper />
                                                                </CSSMotion>
                                                              </ErrorList>
                                                            </div>
                                                          </Col>
                                                        </FormItemInput>
                                                      </div>
                                                    </Row>
                                                  </Field>
                                                </WrapperField>
                                              </FormItem>
                                            </div>
                                            <div
                                              className="form-submit"
                                            >
                                              <Button
                                                className="btn btn-primary btn-md"
                                                type="submit"
                                              >
                                                <button
                                                  className="btn btn-primary btn-md"
                                                  type="submit"
                                                >
                                                  Register
                                                </button>
                                              </Button>
                                            </div>
                                            <div
                                              className="switch"
                                            >
                                              <p>
                                                Already have an account?
                                                 
                                                <Link
                                                  to="/login"
                                                >
                                                  <a
                                                    href="/login"
                                                    onClick={[Function]}
                                                  >
                                                    Login now
                                                  </a>
                                                </Link>
                                              </p>
                                            </div>
                                          </form>
                                        </ForwardRef(Form)>
                                      </SizeContextProvider>
                                    </DisabledContextProvider>
                                  </ForwardRef(InternalForm)>
                                </div>
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Row>
                    </div>
                  </div>
                </Register>
              </Suspense>
            </Router>
          </BrowserRouter>
        </ProviderChildren>
      </LocaleReceiver>
    </ConfigProvider>
  </Provider>
</I18nextProvider>
`;
